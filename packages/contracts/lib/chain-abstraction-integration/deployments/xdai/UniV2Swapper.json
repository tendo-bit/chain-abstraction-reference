{
  "address": "0x7b659eF70e18C01d88F305042ae916D235cb8648",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniV2Router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swapETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5051d3a373aade80e59a3f17421fb3ea0fce5701d5d35a8c854d19ad1abae80b",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0x7b659eF70e18C01d88F305042ae916D235cb8648",
    "transactionIndex": 0,
    "gasUsed": "584328",
    "logsBloom": "0x
    "blockHash": "0x1f15732b77c8183cb4aa516a675462e7debb763f74e65dcffd8c1a066e4da868",
    "transactionHash": "0x5051d3a373aade80e59a3f17421fb3ea0fce5701d5d35a8c854d19ad1abae80b",
    "logs": [],
    "blockNumber": 27850645,
    "cumulativeGasUsed": "584328",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1C232F01118CB8B424793ae03F870aa7D0ac7f77"
  ],
  "numDeployments": 1,
  "solcInputHash": "5baa44abeea841b29c26c38421b92a9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swap(uint256,address,address,bytes)\":{\"details\":\"Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.\",\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the UniV2 router.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"swapETH(uint256,address,bytes)\":{\"details\":\"Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.\",\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_swapData\":\"Data to pass to the UniV2 router.\",\"_toAsset\":\"Address of the token to swap to.\"}}},\"title\":\"UniV2Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(uint256,address,address,bytes)\":{\"notice\":\"Swap the given amount of tokens using UniV2.\"},\"swapETH(uint256,address,bytes)\":{\"notice\":\"Swap the given amount of ETH using UniV2.\"}},\"notice\":\"Swapper contract for UniswapV2 swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Swap/Uniswap/UniV2Swapper.sol\":\"UniV2Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":connext-interfaces/=lib/connext-interfaces/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":vulcan/=lib/vulcan/src/\"],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/Swap/Uniswap/UniV2Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ISwapper} from \\\"../interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title UniV2Swapper\\n * @notice Swapper contract for UniswapV2 swaps.\\n */\\ncontract UniV2Swapper is ISwapper {\\n  using Address for address;\\n\\n  IUniswapV2Router02 public immutable uniswapV2Router;\\n\\n  constructor(address _uniV2Router) {\\n    uniswapV2Router = IUniswapV2Router02(_uniV2Router);\\n  }\\n\\n  /**\\n   * @notice Swap the given amount of tokens using UniV2.\\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\\n   * until the funds are transferred to this contract.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the UniV2 router.\\n   */\\n  function swap(\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData\\n  ) external override returns (uint256 amountOut) {\\n    // transfer the funds to be swapped from the sender into this contract\\n    TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\\n\\n    uint256 amountOutMin = abi.decode(_swapData, (uint256));\\n\\n    if (_fromAsset != _toAsset) {\\n      bool toNative = _toAsset == address(0);\\n      address weth = uniswapV2Router.WETH();\\n\\n      address[] memory path = new address[](2);\\n      path[0] = _fromAsset;\\n      path[1] = toNative ? weth : _toAsset;\\n      TransferHelper.safeApprove(_fromAsset, address(uniswapV2Router), _amountIn);\\n\\n      uint[] memory amounts;\\n      if (!toNative) {\\n        amounts = uniswapV2Router.swapExactTokensForTokens(_amountIn, amountOutMin, path, msg.sender, block.timestamp);\\n      } else {\\n        amounts = uniswapV2Router.swapExactTokensForETH(_amountIn, amountOutMin, path, msg.sender, block.timestamp);\\n      }\\n      amountOut = amounts[amounts.length - 1];\\n    }\\n  }\\n\\n  /**\\n   * @notice Swap the given amount of ETH using UniV2.\\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\\n   * until the funds are transferred to this contract.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the UniV2 router.\\n   */\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _toAsset,\\n    bytes calldata _swapData\\n  ) public payable override returns (uint256 amountOut) {\\n    // check if msg.value is same as amountIn\\n    require(msg.value >= _amountIn, \\\"UniV2Swapper: msg.value != _amountIn\\\");\\n\\n    uint256 amountOutMin = abi.decode(_swapData, (uint256));\\n\\n    if (_toAsset != address(0)) {\\n      address[] memory path = new address[](2);\\n      path[0] = uniswapV2Router.WETH();\\n      path[1] = _toAsset;\\n      uint[] memory amounts = uniswapV2Router.swapExactETHForTokens{value: _amountIn}(\\n        amountOutMin,\\n        path,\\n        msg.sender,\\n        block.timestamp\\n      );\\n      amountOut = amounts[amounts.length - 1];\\n    } else {\\n      amountOut = _amountIn;\\n      TransferHelper.safeTransferETH(msg.sender, amountOut);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xddb19c92e5ee349dc6b05576c3182ec58941c5fc43557e48e2e4f7550b315d6d\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function swap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external returns (uint256 amountOut);\\n\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x444fec1912aaa57621d4bd37f2a77489796668ae8e6e5bff6100d28ea02ae773\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a03461008e57601f610a4138819003918201601f19168301916001600160401b038311848410176100935780849260209460405283398101031261008e57516001600160a01b0381169081900361008e5760805260405161099790816100aa823960805181818160cb015281816103c70152818161046d01528181610511015281816105b801526107000152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081631694505e146106ed57508063a2c554d3146102cf5763f6b13d3f1461004057600080fd5b60603660031901126102795760043561005761072f565b67ffffffffffffffff60443581811161027957610078903690600401610745565b909380341061027e578491602095869181010312610279576001600160a01b039384169283156102015750604051916100b083610773565b60028352604036878501376040516315ab88c960e31b8152937f0000000000000000000000000000000000000000000000000000000000000000861692908786600481875afa80156101c65761014c9760009788926101d2575b50610114876107d0565b91169052610121856107f3565b52604051809681958294637ff36ab560e01b8452356004840152608060248401526084830190610893565b33604483015242606483015203925af19081156101c6576000916101a3575b508051600019810190811161018d5761018391610803565b515b604051908152f35b634e487b7160e01b600052601160045260246000fd5b6101c091503d806000833e6101b8818361078f565b810190610817565b3861016b565b6040513d6000823e3d90fd5b6101f39192508a3d8c116101fa575b6101eb818361078f565b8101906107b1565b903861010a565b503d6101e1565b925092505081604051918483019083821090821117610263576000809392818094819460405252335af1610233610909565b506101855760405162461bcd60e51b815260048101839052600360248201526253544560e81b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b60405162461bcd60e51b8152602060048201526024808201527f556e695632537761707065723a206d73672e76616c756520213d205f616d6f75604482015263373a24b760e11b6064820152608490fd5b34610279576080366003190112610279576102e861072f565b6044356001600160a01b03811690036102795760643567ffffffffffffffff81116102795761031b903690600401610745565b90600091604051602081016323b872dd60e01b815233602483015230604483015260043560648301526064825260a082019082821067ffffffffffffffff831117610263576000928392604052519082885af1610376610909565b816106be575b5015610693578160209181010312610279576001600160a01b036044358116908416036103af575b602082604051908152f35b6040516315ab88c960e31b81529091506020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101c657600091610674575b506040519261040e84610773565b6002845260403660208601376001600160a01b03811661042d856107d0565b526044356001600160a01b03161591821561066b575b61044c856107f3565b6001600160a01b03918216905260405163095ea7b360e01b602082019081527f0000000000000000000000000000000000000000000000000000000000000000909216602482015260043560448083019190915281526080810192909167ffffffffffffffff841183851017610263576000809493819460405251925af16104d2610909565b8161063c575b5015610612576105895761050c9160009160405193849283926338ed173960e01b84524291339135600435600487016108d0565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156101c65760009161056e575b505b805160001981019190821161018d5760209161056791610803565b51826103a4565b61058391503d806000833e6101b8818361078f565b8161054a565b6105b39160009160405193849283926318cbafe560e01b84524291339135600435600487016108d0565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156101c6576000916105f7575b5061054c565b61060c91503d806000833e6101b8818361078f565b816105f1565b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610651575b5050846104d8565b6106649250602080918301019101610949565b8480610649565b50604435610443565b61068d915060203d6020116101fa576101eb818361078f565b83610400565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156106d3575b50508561037c565b6106e69250602080918301019101610949565b85806106cb565b34610279576000366003190112610279577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b602435906001600160a01b038216820361027957565b9181601f840112156102795782359167ffffffffffffffff8311610279576020838186019501011161027957565b6060810190811067ffffffffffffffff82111761026357604052565b90601f8019910116810190811067ffffffffffffffff82111761026357604052565b9081602091031261027957516001600160a01b03811681036102795790565b8051156107dd5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156107dd5760400190565b80518210156107dd5760209160051b010190565b90602090818382031261027957825167ffffffffffffffff93848211610279570181601f82011215610279578051938411610263578360051b90604051946108618584018761078f565b85528380860192820101928311610279578301905b828210610884575050505090565b81518152908301908301610876565b90815180825260208080930193019160005b8281106108b3575050505090565b83516001600160a01b0316855293810193928101926001016108a5565b91926080936108f592979695978452602084015260a0604084015260a0830190610893565b6001600160a01b0390951660608201520152565b3d15610944573d9067ffffffffffffffff82116102635760405191610938601f8201601f19166020018461078f565b82523d6000602084013e565b606090565b9081602091031261027957518015158103610279579056fea2646970667358221220dd6f7975e6495e8562f151d116723a491118f014cf7fc9312ad09fe7f71bac6164736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081631694505e146106ed57508063a2c554d3146102cf5763f6b13d3f1461004057600080fd5b60603660031901126102795760043561005761072f565b67ffffffffffffffff60443581811161027957610078903690600401610745565b909380341061027e578491602095869181010312610279576001600160a01b039384169283156102015750604051916100b083610773565b60028352604036878501376040516315ab88c960e31b8152937f0000000000000000000000000000000000000000000000000000000000000000861692908786600481875afa80156101c65761014c9760009788926101d2575b50610114876107d0565b91169052610121856107f3565b52604051809681958294637ff36ab560e01b8452356004840152608060248401526084830190610893565b33604483015242606483015203925af19081156101c6576000916101a3575b508051600019810190811161018d5761018391610803565b515b604051908152f35b634e487b7160e01b600052601160045260246000fd5b6101c091503d806000833e6101b8818361078f565b810190610817565b3861016b565b6040513d6000823e3d90fd5b6101f39192508a3d8c116101fa575b6101eb818361078f565b8101906107b1565b903861010a565b503d6101e1565b925092505081604051918483019083821090821117610263576000809392818094819460405252335af1610233610909565b506101855760405162461bcd60e51b815260048101839052600360248201526253544560e81b6044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b60405162461bcd60e51b8152602060048201526024808201527f556e695632537761707065723a206d73672e76616c756520213d205f616d6f75604482015263373a24b760e11b6064820152608490fd5b34610279576080366003190112610279576102e861072f565b6044356001600160a01b03811690036102795760643567ffffffffffffffff81116102795761031b903690600401610745565b90600091604051602081016323b872dd60e01b815233602483015230604483015260043560648301526064825260a082019082821067ffffffffffffffff831117610263576000928392604052519082885af1610376610909565b816106be575b5015610693578160209181010312610279576001600160a01b036044358116908416036103af575b602082604051908152f35b6040516315ab88c960e31b81529091506020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156101c657600091610674575b506040519261040e84610773565b6002845260403660208601376001600160a01b03811661042d856107d0565b526044356001600160a01b03161591821561066b575b61044c856107f3565b6001600160a01b03918216905260405163095ea7b360e01b602082019081527f0000000000000000000000000000000000000000000000000000000000000000909216602482015260043560448083019190915281526080810192909167ffffffffffffffff841183851017610263576000809493819460405251925af16104d2610909565b8161063c575b5015610612576105895761050c9160009160405193849283926338ed173960e01b84524291339135600435600487016108d0565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156101c65760009161056e575b505b805160001981019190821161018d5760209161056791610803565b51826103a4565b61058391503d806000833e6101b8818361078f565b8161054a565b6105b39160009160405193849283926318cbafe560e01b84524291339135600435600487016108d0565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156101c6576000916105f7575b5061054c565b61060c91503d806000833e6101b8818361078f565b816105f1565b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610651575b5050846104d8565b6106649250602080918301019101610949565b8480610649565b50604435610443565b61068d915060203d6020116101fa576101eb818361078f565b83610400565b60405162461bcd60e51b815260206004820152600360248201526229aa2360e91b6044820152606490fd5b80518015925082156106d3575b50508561037c565b6106e69250602080918301019101610949565b85806106cb565b34610279576000366003190112610279577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b602435906001600160a01b038216820361027957565b9181601f840112156102795782359167ffffffffffffffff8311610279576020838186019501011161027957565b6060810190811067ffffffffffffffff82111761026357604052565b90601f8019910116810190811067ffffffffffffffff82111761026357604052565b9081602091031261027957516001600160a01b03811681036102795790565b8051156107dd5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156107dd5760400190565b80518210156107dd5760209160051b010190565b90602090818382031261027957825167ffffffffffffffff93848211610279570181601f82011215610279578051938411610263578360051b90604051946108618584018761078f565b85528380860192820101928311610279578301905b828210610884575050505090565b81518152908301908301610876565b90815180825260208080930193019160005b8281106108b3575050505090565b83516001600160a01b0316855293810193928101926001016108a5565b91926080936108f592979695978452602084015260a0604084015260a0830190610893565b6001600160a01b0390951660608201520152565b3d15610944573d9067ffffffffffffffff82116102635760405191610938601f8201601f19166020018461078f565b82523d6000602084013e565b606090565b9081602091031261027957518015158103610279579056fea2646970667358221220dd6f7975e6495e8562f151d116723a491118f014cf7fc9312ad09fe7f71bac6164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swap(uint256,address,address,bytes)": {
        "details": "Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.",
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the UniV2 router.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "swapETH(uint256,address,bytes)": {
        "details": "Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.",
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_swapData": "Data to pass to the UniV2 router.",
          "_toAsset": "Address of the token to swap to."
        }
      }
    },
    "title": "UniV2Swapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(uint256,address,address,bytes)": {
        "notice": "Swap the given amount of tokens using UniV2."
      },
      "swapETH(uint256,address,bytes)": {
        "notice": "Swap the given amount of ETH using UniV2."
      }
    },
    "notice": "Swapper contract for UniswapV2 swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}