{
  "address": "0x29fF6FA6aD04d6E8b420CC45C40ffFF671A36649",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "addSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedSwappers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "directSwapperCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "exactSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "removeSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "swapAndXCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "swapAndXCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x56635a2a04279d1d4a51cf753a42e578606899783c8548bee0a597e53699268c",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0x29fF6FA6aD04d6E8b420CC45C40ffFF671A36649",
    "transactionIndex": 1,
    "gasUsed": "1181049",
    "logsBloom": "0x
    "blockHash": "0xd85fc1c4dc699692a7fff71fd3d6d1483471be90c994660244edc3df1814a593",
    "transactionHash": "0x56635a2a04279d1d4a51cf753a42e578606899783c8548bee0a597e53699268c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27850611,
        "transactionHash": "0x56635a2a04279d1d4a51cf753a42e578606899783c8548bee0a597e53699268c",
        "address": "0x29fF6FA6aD04d6E8b420CC45C40ffFF671A36649",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd85fc1c4dc699692a7fff71fd3d6d1483471be90c994660244edc3df1814a593"
      }
    ],
    "blockNumber": 27850611,
    "cumulativeGasUsed": "1202049",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5bB83e95f63217CDa6aE3D181BA580Ef377D2109"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f66c88f93cf4c3d4622bf6dd049af95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"addSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSwappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"directSwapperCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"exactSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"removeSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"swapAndXCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"swapAndXCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to add.\"}},\"directSwapperCall(address,bytes)\":{\"params\":{\"_swapper\":\"Address of the swapper to use.\",\"swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router.\"}},\"exactSwap(address,uint256,address,address,bytes)\":{\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.\",\"_swapper\":\"Address of the swapper to use.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes)\":{\"details\":\"Data for the swap is generated offchain to call to the appropriate swapper contract Function is payable since it uses the relayer fee in native asset\",\"params\":{\"_amountIn\":\"Amount of the asset to swap from\",\"_callData\":\"Calldata to call the destination with\",\"_delegate\":\"Delegate address\",\"_destination\":\"Destination of the xcall\",\"_fromAsset\":\"Address of the asset to swap from\",\"_slippage\":\"Total slippage amount accepted\",\"_swapData\":\"Data to call the swapper contract with\",\"_swapper\":\"Address of the swapper contract\",\"_to\":\"Address to send the asset and call with the calldata on the destination\",\"_toAsset\":\"Address of the asset to swap to\"}},\"swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes,uint256)\":{\"details\":\"Data for the swap is generated offchain to call to the appropriate swapper contract Pays relayer fee from the input asset\",\"params\":{\"_amountIn\":\"Amount of the asset to swap from\",\"_callData\":\"Calldata to call the destination with\",\"_delegate\":\"Delegate address\",\"_destination\":\"Destination of the xcall\",\"_fromAsset\":\"Address of the asset to swap from\",\"_relayerFee\":\"Relayer fee to pay in the input asset\",\"_slippage\":\"Total slippage amount accepted\",\"_swapData\":\"Data to call the swapper contract with\",\"_swapper\":\"Address of the swapper contract\",\"_to\":\"Address to send the asset and call with the calldata on the destination\",\"_toAsset\":\"Address of the asset to swap to\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSwapper(address)\":{\"notice\":\"Add a swapper to the list of allowed swappers.\"},\"directSwapperCall(address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed.\"},\"exactSwap(address,uint256,address,address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token.\"},\"removeSwapper(address)\":{\"notice\":\"Remove a swapper from the list of allowed swappers.\"},\"swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes)\":{\"notice\":\"Calls a swapper contract and then calls xcall on connext\"},\"swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes,uint256)\":{\"notice\":\"Calls a swapper contract and then calls xcall on connext\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/origin/Swap/SwapAndXCall.sol\":\"SwapAndXCall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":connext-interfaces/=lib/connext-interfaces/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":vulcan/=lib/vulcan/src/\"],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/origin/Swap/SwapAndXCall.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IConnext} from \\\"connext-interfaces/core/IConnext.sol\\\";\\nimport {SwapAdapter} from \\\"../../shared/Swap/SwapAdapter.sol\\\";\\n\\ncontract SwapAndXCall is SwapAdapter {\\n  // Connext address on this domain\\n  IConnext connext;\\n\\n  constructor(address _connext) SwapAdapter() {\\n    connext = IConnext(_connext);\\n  }\\n\\n  // EXTERNAL FUNCTIONS\\n  /**\\n   * @notice Calls a swapper contract and then calls xcall on connext\\n   * @dev Data for the swap is generated offchain to call to the appropriate swapper contract\\n   * Function is payable since it uses the relayer fee in native asset\\n   * @param _fromAsset Address of the asset to swap from\\n   * @param _toAsset Address of the asset to swap to\\n   * @param _amountIn Amount of the asset to swap from\\n   * @param _swapper Address of the swapper contract\\n   * @param _swapData Data to call the swapper contract with\\n   * @param _destination Destination of the xcall\\n   * @param _to Address to send the asset and call with the calldata on the destination\\n   * @param _delegate Delegate address\\n   * @param _slippage Total slippage amount accepted\\n   * @param _callData Calldata to call the destination with\\n   */\\n  function swapAndXCall(\\n    address _fromAsset,\\n    address _toAsset,\\n    uint256 _amountIn,\\n    address _swapper,\\n    bytes calldata _swapData,\\n    uint32 _destination,\\n    address _to,\\n    address _delegate,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable {\\n    uint256 amountOut = _fromAsset == address(0)\\n      ? _setupAndSwapETH(_toAsset, _amountIn, _swapper, _swapData)\\n      : _setupAndSwap(_fromAsset, _toAsset, _amountIn, _swapper, _swapData);\\n\\n    connext.xcall{value: _fromAsset == address(0) ? msg.value - _amountIn : msg.value}(\\n      _destination,\\n      _to,\\n      _toAsset,\\n      _delegate,\\n      amountOut,\\n      _slippage,\\n      _callData\\n    );\\n  }\\n\\n  /**\\n   * @notice Calls a swapper contract and then calls xcall on connext\\n   * @dev Data for the swap is generated offchain to call to the appropriate swapper contract\\n   * Pays relayer fee from the input asset\\n   * @param _fromAsset Address of the asset to swap from\\n   * @param _toAsset Address of the asset to swap to\\n   * @param _amountIn Amount of the asset to swap from\\n   * @param _swapper Address of the swapper contract\\n   * @param _swapData Data to call the swapper contract with\\n   * @param _destination Destination of the xcall\\n   * @param _to Address to send the asset and call with the calldata on the destination\\n   * @param _delegate Delegate address\\n   * @param _slippage Total slippage amount accepted\\n   * @param _callData Calldata to call the destination with\\n   * @param _relayerFee Relayer fee to pay in the input asset\\n   */\\n  function swapAndXCall(\\n    address _fromAsset,\\n    address _toAsset,\\n    uint256 _amountIn,\\n    address _swapper,\\n    bytes calldata _swapData,\\n    uint32 _destination,\\n    address _to,\\n    address _delegate,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external payable {\\n    uint256 amountOut = _fromAsset == address(0)\\n      ? _setupAndSwapETH(_toAsset, _amountIn, _swapper, _swapData)\\n      : _setupAndSwap(_fromAsset, _toAsset, _amountIn, _swapper, _swapData);\\n\\n    connext.xcall(_destination, _to, _toAsset, _delegate, amountOut - _relayerFee, _slippage, _callData, _relayerFee);\\n  }\\n\\n  // INTERNAL FUNCTIONS\\n\\n  /**\\n   * @notice Sets up the swap and returns the amount out\\n   * @dev Handles approvals to the connext contract and the swapper contract\\n   * @param _fromAsset Address of the asset to swap from\\n   * @param _toAsset Address of the asset to swap to\\n   * @param _amountIn Amount of the asset to swap from\\n   * @param _swapper Address of the swapper contract\\n   * @param _swapData Data to call the swapper contract with\\n   * @return amountOut Amount of the asset after swap\\n   */\\n  function _setupAndSwap(\\n    address _fromAsset,\\n    address _toAsset,\\n    uint256 _amountIn,\\n    address _swapper,\\n    bytes calldata _swapData\\n  ) internal returns (uint256 amountOut) {\\n    TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\\n\\n    if (_fromAsset != _toAsset) {\\n      require(_swapper != address(0), \\\"SwapAndXCall: zero swapper!\\\");\\n\\n      // If fromAsset is not native and allowance is less than amountIn\\n      if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\\n        TransferHelper.safeApprove(_fromAsset, _swapper, type(uint256).max);\\n      }\\n\\n      amountOut = this.directSwapperCall(_swapper, _swapData);\\n    } else {\\n      amountOut = _amountIn;\\n    }\\n\\n    if (_toAsset != address(0)) {\\n      if (IERC20(_toAsset).allowance(address(this), address(connext)) < amountOut) {\\n        TransferHelper.safeApprove(_toAsset, address(connext), type(uint256).max);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets up the swap and returns the amount out\\n   * @dev Handles approvals to the connext contract and the swapper contract\\n   * @param _toAsset Address of the asset to swap to\\n   * @param _amountIn Amount of the asset to swap from\\n   * @param _swapper Address of the swapper contract\\n   * @param _swapData Data to call the swapper contract with\\n   * @return amountOut Amount of the asset after swap\\n   */\\n  function _setupAndSwapETH(\\n    address _toAsset,\\n    uint256 _amountIn,\\n    address _swapper,\\n    bytes calldata _swapData\\n  ) internal returns (uint256 amountOut) {\\n    require(msg.value >= _amountIn, \\\"SwapAndXCall: msg.value != _amountIn\\\");\\n\\n    if (_toAsset != address(0)) {\\n      require(_swapper != address(0), \\\"SwapAndXCall: zero swapper!\\\");\\n      amountOut = this.directSwapperCall{value: _amountIn}(_swapper, _swapData);\\n\\n      if (IERC20(_toAsset).allowance(address(this), address(connext)) < amountOut) {\\n        TransferHelper.safeApprove(_toAsset, address(connext), type(uint256).max);\\n      }\\n    } else {\\n      amountOut = _amountIn;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3ca8c65a7e7d2e69891410cb4c858dce2f9e69bee3ab1dbdf018f53073f5cd82\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/SwapAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {ISwapper} from \\\"./interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title SwapAdapter\\n * @author Connext\\n * @notice This contract is used to provide a generic interface to swap tokens through\\n * a variety of different swap routers. It is used to swap tokens\\n * before proceeding with other actions. Swap router implementations can be added by owner.\\n * This is designed to be owned by the Connext DAO and swappers can be added by the DAO.\\n */\\ncontract SwapAdapter is Ownable2Step {\\n  using Address for address;\\n  using Address for address payable;\\n\\n  mapping(address => bool) public allowedSwappers;\\n\\n  address public immutable uniswapSwapRouter = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n  constructor() {\\n    allowedSwappers[address(this)] = true;\\n    allowedSwappers[uniswapSwapRouter] = true;\\n  }\\n\\n  /// Payable\\n  // @dev On the origin side, we can accept native assets for a swap.\\n  receive() external payable virtual {}\\n\\n  /// ADMIN\\n  /**\\n   * @notice Add a swapper to the list of allowed swappers.\\n   * @param _swapper Address of the swapper to add.\\n   */\\n  function addSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = true;\\n  }\\n\\n  /**\\n   * @notice Remove a swapper from the list of allowed swappers.\\n   * @param _swapper Address of the swapper to remove.\\n   */\\n  function removeSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = false;\\n  }\\n\\n  /// EXTERNAL\\n  /**\\n   * @notice Swap an exact amount of tokens for another token.\\n   * @param _swapper Address of the swapper to use.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the swapper. This data is encoded for a particular swap router, usually given\\n   * by an API. The swapper will decode the data and re-encode it with the new amountIn.\\n   */\\n  function exactSwap(\\n    address _swapper,\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData // comes directly from API with swap data encoded\\n  ) external payable returns (uint256 amountOut) {\\n    require(allowedSwappers[_swapper], \\\"!allowedSwapper\\\");\\n\\n    // If from == to, no need to swap\\n    if (_fromAsset == _toAsset) {\\n      return _amountIn;\\n    }\\n\\n    if (_fromAsset == address(0)) {\\n      amountOut = ISwapper(_swapper).swapETH(_amountIn, _toAsset, _swapData);\\n    } else {\\n      if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\\n        TransferHelper.safeApprove(_fromAsset, _swapper, type(uint256).max);\\n      }\\n      amountOut = ISwapper(_swapper).swap(_amountIn, _fromAsset, _toAsset, _swapData);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow\\n   * easy swaps on the source side where the amount does not need to be changed.\\n   * @param _swapper Address of the swapper to use.\\n   * @param swapData Data to pass to the swapper. This data is encoded for a particular swap router.\\n   */\\n  function directSwapperCall(address _swapper, bytes calldata swapData) external payable returns (uint256 amountOut) {\\n    bytes memory ret = _swapper.functionCallWithValue(swapData, msg.value, \\\"!directSwapperCallFailed\\\");\\n    amountOut = abi.decode(ret, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x278cd630093a943227629d253cefb474dc360628116453d9494825d81087c981\",\"license\":\"MIT\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function swap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external returns (uint256 amountOut);\\n\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x444fec1912aaa57621d4bd37f2a77489796668ae8e6e5bff6100d28ea02ae773\",\"license\":\"Unlicense\"},\"lib/connext-interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c2f287fe81216f7060acce25747374631b94ff9a87573e1c5d36df1a3a2fdf8\",\"license\":\"UNLICENSED\"},\"lib/connext-interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"lib/connext-interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a0346100f657601f6113b638819003918201601f19168301916001600160401b038311848410176100fb578084926020946040528339810103126100f657516001600160a01b0390818116908190036100f65760018060a01b031980600154166001556000805433838216178255604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a36001604073e592427a0aece92de3edee1f18e0157c05861564928360805230815260026020528181209360ff199484868254161790558152209182541617905560035416176003556112a490816101128239608051816105440152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060a0815260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c9182630c949d49146106fa5782632bb679641461057357826336f7d9f81461052f5782633f2d4131146104ef578263715018a61461048a57826379ba5097146103c65782638da5cb5b1461039e5782638ff1ed9714610360578263993850061461031d578263a0d70102146101cc578263defc22481461015a57508163e30c39781461012d575063f2fde38b146100be5780610010565b3461012a57602036600319011261012a576100d7610847565b6100df6108fb565b600180546001600160a01b0319166001600160a01b0392831690811790915582549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b80fd5b90503461015657816003193601126101565760015490516001600160a01b039091168152602090f35b5080fd5b908360a036600319011261012a57610170610847565b604435939091906001600160a01b03851685036101565761018f610878565b916084359067ffffffffffffffff821161012a5750916101b96101c59492602097943691016108ba565b93909260243590610fac565b9051908152f35b90838160031936011261012a576101e1610847565b67ffffffffffffffff906024358281116103195761020290369087016108ba565b9561020c87610cfb565b9061021987519283610976565b878252602097888301933682820111610315578188928b9287378401015286519485880190811186821017610302578752601885527f216469726563745377617070657243616c6c4661696c65640000000000000000888601523447106102b05750846102989493928192519034855af1610292610d17565b9161119a565b90838280518101031261012a57508201519051908152f35b865162461bcd60e51b8152908101889052602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b634e487b7160e01b875260418252602487fd5b8780fd5b8380fd5b83823461015657602036600319011261015657610338610847565b6103406108fb565b6001600160a01b0316825260026020528120805460ff1916600117905580f35b8382346101565760203660031901126101565760209160ff9082906001600160a01b0361038b610847565b1681526002855220541690519015158152f35b838234610156578160031936011261015657905490516001600160a01b039091168152602090f35b915034610486578260031936011261048657600154916001600160a01b039133838516036104315750506001600160a01b031991821660015582543392811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152fd5b8280fd5b833461012a578060031936011261012a576104a36108fb565b600180546001600160a01b03199081169091558154908116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8382346101565760203660031901126101565761050a610847565b6105126108fb565b6001600160a01b0316825260026020528120805460ff1916905580f35b838234610156578160031936011261015657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9150610140366003190112610486578261058b610847565b92610594610862565b61059c610878565b9167ffffffffffffffff6084358181116106f6576105bd90369084016108ba565b90976105c76108e8565b926105d061088e565b966105d96108a4565b91610124359081116106f2576105f290369088016108ba565b6001600160a01b039c8d8616159b50919590948d939092908c156106de5761061e93506044358b610e20565b915b600354821699156106d6578161063860443534610953565b985b8c519d8e9b8c9a8b9a6345560b5d60e11b8c5263ffffffff16908b015216602489015216604487015216606485015260848401526101043560a484015260c4830160e0905260e483019061068d926109ae565b03915a94602095f19081156106cd57506106a5575080f35b602090813d81116106c6575b6106bb8183610976565b8101031261012a5780f35b503d6106b1565b513d84823e3d90fd5b81349861063a565b6106ec938b60443591610a40565b91610620565b8980fd5b8580fd5b915061016036600319011261048657610711610847565b610719610862565b9260443593610726610878565b94866084359667ffffffffffffffff978881116104865761074a90369087016108ba565b9390986107556108e8565b9261075e61088e565b9a6107676108a4565b97610124359384116108435760209a63ffffffff9861078c8c61081a973691016108ba565b94909561014435988560018060a01b0380608052861615600014610834576107b49550610e20565b985b6107c786608051600354169b610953565b918d519e8f9c8d9b8c9a6393f18ac560e01b8c5216908a01526080511660248901526080511660448801526080511660648701526084860152610104803560a487015261010060c48701528501916109ae565b9060e483015203925af19081156106cd57506106a5575080f35b61083d95610a40565b986107b6565b8680fd5b600435906001600160a01b038216820361085d57565b600080fd5b602435906001600160a01b038216820361085d57565b606435906001600160a01b038216820361085d57565b60c435906001600160a01b038216820361085d57565b60e435906001600160a01b038216820361085d57565b9181601f8401121561085d5782359167ffffffffffffffff831161085d576020838186019501011161085d57565b60a4359063ffffffff8216820361085d57565b6000546001600160a01b0316330361090f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820391821161096057565b634e487b7160e01b600052601160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761099857604052565b634e487b7160e01b600052604160045260246000fd5b908060209392818452848401376000828201840152601f01601f1916010190565b156109d657565b60405162461bcd60e51b815260206004820152601b60248201527f53776170416e645843616c6c3a207a65726f20737761707065722100000000006044820152606490fd5b6001600160a01b039091168152604060208201819052610a3d939101916109ae565b90565b95949190936040928351916020958684016323b872dd60e01b81523360248601523060448601528560648601526064855260a085019480861067ffffffffffffffff871117610998578b958852600095869283809351925af1610aa1610d17565b81610ccb575b5015610ca1576001600160a01b0399888b1695818c16808814610c9557610ad18d851615156109cf565b8851636eb1769f60e11b81523060048201526001600160a01b0385166024820152908a90829060449082905afa908115610c8b57908a95949392918891610c54575b5090839110610c44575b5050610b3c8751948593849363506b808160e11b855260048501610a1b565b038185305af1908115610c3a578291610c0d575b50965b82610b61575b505050505050565b6003548451636eb1769f60e11b815230600482015291166001600160a01b03811660248301529490928190849081806044810103915afa938415610c02575090879392918193610bce575b50505010610bbe575b80808080610b59565b610bc791610d5f565b3880610bb5565b919350915082813d8111610bfb575b610be78183610976565b8101031261012a5750849051388080610bac565b503d610bdd565b51913d9150823e3d90fd5b90508481813d8311610c33575b610c248183610976565b81010312610156575138610b50565b503d610c1a565b84513d84823e3d90fd5b610c4d91610d5f565b3881610b1d565b8681939495969792503d8311610c84575b610c6f8183610976565b81010312610843575189949392919083610b13565b503d610c65565b89513d89823e3d90fd5b50935050505096610b53565b855162461bcd60e51b815260048101889052600360248201526229aa2360e91b6044820152606490fd5b80518015925089908315610ce3575b50505038610aa7565b610cf39350820181019101610d47565b388881610cda565b67ffffffffffffffff811161099857601f01601f191660200190565b3d15610d42573d90610d2882610cfb565b91610d366040519384610976565b82523d6000602084013e565b606090565b9081602091031261085d5751801515810361085d5790565b60405190602082019263095ea7b360e01b845260018060a01b03166024830152600019604483015260448252608082019282841067ffffffffffffffff851117610998576000809493819460405251925af1610db9610d17565b81610df1575b5015610dc757565b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610e06575b505038610dbf565b610e199250602080918301019101610d47565b3880610dfe565b919492939093843410610f5b576001600160a01b0394838616918215610f505787610e5488610e719798999a1615156109cf565b60405163506b808160e11b81529586958693849360048501610a1b565b036020958693305af1918215610f1557600092610f21575b50600354604051636eb1769f60e11b815230600482015296166001600160a01b0381166024880152919591928692918190839060449082905afa908115610f1557600091610ee9575b50905010610ede575050565b610ee791610d5f565b565b82813d8311610f0e575b610efd8183610976565b8101031261012a5750518038610ed2565b503d610ef3565b6040513d6000823e3d90fd5b90918382813d8311610f49575b610f388183610976565b8101031261012a5750519038610e89565b503d610f2e565b509450505050915090565b60405162461bcd60e51b8152602060048201526024808201527f53776170416e645843616c6c3a206d73672e76616c756520213d205f616d6f75604482015263373a24b760e11b6064820152608490fd5b92949060018060a01b03808516916000958387526020956002875260409960ff8b8a2054161561116457841693811691848314611156578261106c575050509085859493926110228a51998a968795869463f6b13d3f60e01b8652600486015260248501526060604485015260648401916109ae565b03925af1938415610c025750819361103b575b50505090565b9091809350813d8311611065575b6110538183610976565b8101031261012a575051388080611035565b503d611049565b8a51636eb1769f60e11b81523060048201526001600160a01b0382166024820152969994969294928881604481895afa90811561114c5791899897969593918b95938691611109575b509084611022949392106110f9575b50508b519a8b978896879563a2c554d360e01b87526004870152602486015260448501526080606485015260848401916109ae565b61110291610d5f565b38806110c4565b92949697989980929496508391503d8311611145575b6111298183610976565b810103126106f2575188979695948a94909390929091846110b5565b503d61111f565b8c513d8c823e3d90fd5b505050965050505050505090565b8a5162461bcd60e51b815260048101899052600f60248201526e10b0b63637bbb2b229bbb0b83832b960891b6044820152606490fd5b919290156111fc57508151156111ae575090565b3b156111b75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561120f5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611255575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061123256fea26469706673582212205482e9844b2cb03496363d4c1d02c83dbf1954ad861f34156d2acad6f4d9cb1764736f6c63430008130033",
  "deployedBytecode": "0x604060a0815260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c9182630c949d49146106fa5782632bb679641461057357826336f7d9f81461052f5782633f2d4131146104ef578263715018a61461048a57826379ba5097146103c65782638da5cb5b1461039e5782638ff1ed9714610360578263993850061461031d578263a0d70102146101cc578263defc22481461015a57508163e30c39781461012d575063f2fde38b146100be5780610010565b3461012a57602036600319011261012a576100d7610847565b6100df6108fb565b600180546001600160a01b0319166001600160a01b0392831690811790915582549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e227008380a380f35b80fd5b90503461015657816003193601126101565760015490516001600160a01b039091168152602090f35b5080fd5b908360a036600319011261012a57610170610847565b604435939091906001600160a01b03851685036101565761018f610878565b916084359067ffffffffffffffff821161012a5750916101b96101c59492602097943691016108ba565b93909260243590610fac565b9051908152f35b90838160031936011261012a576101e1610847565b67ffffffffffffffff906024358281116103195761020290369087016108ba565b9561020c87610cfb565b9061021987519283610976565b878252602097888301933682820111610315578188928b9287378401015286519485880190811186821017610302578752601885527f216469726563745377617070657243616c6c4661696c65640000000000000000888601523447106102b05750846102989493928192519034855af1610292610d17565b9161119a565b90838280518101031261012a57508201519051908152f35b865162461bcd60e51b8152908101889052602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b634e487b7160e01b875260418252602487fd5b8780fd5b8380fd5b83823461015657602036600319011261015657610338610847565b6103406108fb565b6001600160a01b0316825260026020528120805460ff1916600117905580f35b8382346101565760203660031901126101565760209160ff9082906001600160a01b0361038b610847565b1681526002855220541690519015158152f35b838234610156578160031936011261015657905490516001600160a01b039091168152602090f35b915034610486578260031936011261048657600154916001600160a01b039133838516036104315750506001600160a01b031991821660015582543392811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152fd5b8280fd5b833461012a578060031936011261012a576104a36108fb565b600180546001600160a01b03199081169091558154908116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8382346101565760203660031901126101565761050a610847565b6105126108fb565b6001600160a01b0316825260026020528120805460ff1916905580f35b838234610156578160031936011261015657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9150610140366003190112610486578261058b610847565b92610594610862565b61059c610878565b9167ffffffffffffffff6084358181116106f6576105bd90369084016108ba565b90976105c76108e8565b926105d061088e565b966105d96108a4565b91610124359081116106f2576105f290369088016108ba565b6001600160a01b039c8d8616159b50919590948d939092908c156106de5761061e93506044358b610e20565b915b600354821699156106d6578161063860443534610953565b985b8c519d8e9b8c9a8b9a6345560b5d60e11b8c5263ffffffff16908b015216602489015216604487015216606485015260848401526101043560a484015260c4830160e0905260e483019061068d926109ae565b03915a94602095f19081156106cd57506106a5575080f35b602090813d81116106c6575b6106bb8183610976565b8101031261012a5780f35b503d6106b1565b513d84823e3d90fd5b81349861063a565b6106ec938b60443591610a40565b91610620565b8980fd5b8580fd5b915061016036600319011261048657610711610847565b610719610862565b9260443593610726610878565b94866084359667ffffffffffffffff978881116104865761074a90369087016108ba565b9390986107556108e8565b9261075e61088e565b9a6107676108a4565b97610124359384116108435760209a63ffffffff9861078c8c61081a973691016108ba565b94909561014435988560018060a01b0380608052861615600014610834576107b49550610e20565b985b6107c786608051600354169b610953565b918d519e8f9c8d9b8c9a6393f18ac560e01b8c5216908a01526080511660248901526080511660448801526080511660648701526084860152610104803560a487015261010060c48701528501916109ae565b9060e483015203925af19081156106cd57506106a5575080f35b61083d95610a40565b986107b6565b8680fd5b600435906001600160a01b038216820361085d57565b600080fd5b602435906001600160a01b038216820361085d57565b606435906001600160a01b038216820361085d57565b60c435906001600160a01b038216820361085d57565b60e435906001600160a01b038216820361085d57565b9181601f8401121561085d5782359167ffffffffffffffff831161085d576020838186019501011161085d57565b60a4359063ffffffff8216820361085d57565b6000546001600160a01b0316330361090f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820391821161096057565b634e487b7160e01b600052601160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761099857604052565b634e487b7160e01b600052604160045260246000fd5b908060209392818452848401376000828201840152601f01601f1916010190565b156109d657565b60405162461bcd60e51b815260206004820152601b60248201527f53776170416e645843616c6c3a207a65726f20737761707065722100000000006044820152606490fd5b6001600160a01b039091168152604060208201819052610a3d939101916109ae565b90565b95949190936040928351916020958684016323b872dd60e01b81523360248601523060448601528560648601526064855260a085019480861067ffffffffffffffff871117610998578b958852600095869283809351925af1610aa1610d17565b81610ccb575b5015610ca1576001600160a01b0399888b1695818c16808814610c9557610ad18d851615156109cf565b8851636eb1769f60e11b81523060048201526001600160a01b0385166024820152908a90829060449082905afa908115610c8b57908a95949392918891610c54575b5090839110610c44575b5050610b3c8751948593849363506b808160e11b855260048501610a1b565b038185305af1908115610c3a578291610c0d575b50965b82610b61575b505050505050565b6003548451636eb1769f60e11b815230600482015291166001600160a01b03811660248301529490928190849081806044810103915afa938415610c02575090879392918193610bce575b50505010610bbe575b80808080610b59565b610bc791610d5f565b3880610bb5565b919350915082813d8111610bfb575b610be78183610976565b8101031261012a5750849051388080610bac565b503d610bdd565b51913d9150823e3d90fd5b90508481813d8311610c33575b610c248183610976565b81010312610156575138610b50565b503d610c1a565b84513d84823e3d90fd5b610c4d91610d5f565b3881610b1d565b8681939495969792503d8311610c84575b610c6f8183610976565b81010312610843575189949392919083610b13565b503d610c65565b89513d89823e3d90fd5b50935050505096610b53565b855162461bcd60e51b815260048101889052600360248201526229aa2360e91b6044820152606490fd5b80518015925089908315610ce3575b50505038610aa7565b610cf39350820181019101610d47565b388881610cda565b67ffffffffffffffff811161099857601f01601f191660200190565b3d15610d42573d90610d2882610cfb565b91610d366040519384610976565b82523d6000602084013e565b606090565b9081602091031261085d5751801515810361085d5790565b60405190602082019263095ea7b360e01b845260018060a01b03166024830152600019604483015260448252608082019282841067ffffffffffffffff851117610998576000809493819460405251925af1610db9610d17565b81610df1575b5015610dc757565b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b8051801592508215610e06575b505038610dbf565b610e199250602080918301019101610d47565b3880610dfe565b919492939093843410610f5b576001600160a01b0394838616918215610f505787610e5488610e719798999a1615156109cf565b60405163506b808160e11b81529586958693849360048501610a1b565b036020958693305af1918215610f1557600092610f21575b50600354604051636eb1769f60e11b815230600482015296166001600160a01b0381166024880152919591928692918190839060449082905afa908115610f1557600091610ee9575b50905010610ede575050565b610ee791610d5f565b565b82813d8311610f0e575b610efd8183610976565b8101031261012a5750518038610ed2565b503d610ef3565b6040513d6000823e3d90fd5b90918382813d8311610f49575b610f388183610976565b8101031261012a5750519038610e89565b503d610f2e565b509450505050915090565b60405162461bcd60e51b8152602060048201526024808201527f53776170416e645843616c6c3a206d73672e76616c756520213d205f616d6f75604482015263373a24b760e11b6064820152608490fd5b92949060018060a01b03808516916000958387526020956002875260409960ff8b8a2054161561116457841693811691848314611156578261106c575050509085859493926110228a51998a968795869463f6b13d3f60e01b8652600486015260248501526060604485015260648401916109ae565b03925af1938415610c025750819361103b575b50505090565b9091809350813d8311611065575b6110538183610976565b8101031261012a575051388080611035565b503d611049565b8a51636eb1769f60e11b81523060048201526001600160a01b0382166024820152969994969294928881604481895afa90811561114c5791899897969593918b95938691611109575b509084611022949392106110f9575b50508b519a8b978896879563a2c554d360e01b87526004870152602486015260448501526080606485015260848401916109ae565b61110291610d5f565b38806110c4565b92949697989980929496508391503d8311611145575b6111298183610976565b810103126106f2575188979695948a94909390929091846110b5565b503d61111f565b8c513d8c823e3d90fd5b505050965050505050505090565b8a5162461bcd60e51b815260048101899052600f60248201526e10b0b63637bbb2b229bbb0b83832b960891b6044820152606490fd5b919290156111fc57508151156111ae575090565b3b156111b75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561120f5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611255575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061123256fea26469706673582212205482e9844b2cb03496363d4c1d02c83dbf1954ad861f34156d2acad6f4d9cb1764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to add."
        }
      },
      "directSwapperCall(address,bytes)": {
        "params": {
          "_swapper": "Address of the swapper to use.",
          "swapData": "Data to pass to the swapper. This data is encoded for a particular swap router."
        }
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.",
          "_swapper": "Address of the swapper to use.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes)": {
        "details": "Data for the swap is generated offchain to call to the appropriate swapper contract Function is payable since it uses the relayer fee in native asset",
        "params": {
          "_amountIn": "Amount of the asset to swap from",
          "_callData": "Calldata to call the destination with",
          "_delegate": "Delegate address",
          "_destination": "Destination of the xcall",
          "_fromAsset": "Address of the asset to swap from",
          "_slippage": "Total slippage amount accepted",
          "_swapData": "Data to call the swapper contract with",
          "_swapper": "Address of the swapper contract",
          "_to": "Address to send the asset and call with the calldata on the destination",
          "_toAsset": "Address of the asset to swap to"
        }
      },
      "swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes,uint256)": {
        "details": "Data for the swap is generated offchain to call to the appropriate swapper contract Pays relayer fee from the input asset",
        "params": {
          "_amountIn": "Amount of the asset to swap from",
          "_callData": "Calldata to call the destination with",
          "_delegate": "Delegate address",
          "_destination": "Destination of the xcall",
          "_fromAsset": "Address of the asset to swap from",
          "_relayerFee": "Relayer fee to pay in the input asset",
          "_slippage": "Total slippage amount accepted",
          "_swapData": "Data to call the swapper contract with",
          "_swapper": "Address of the swapper contract",
          "_to": "Address to send the asset and call with the calldata on the destination",
          "_toAsset": "Address of the asset to swap to"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSwapper(address)": {
        "notice": "Add a swapper to the list of allowed swappers."
      },
      "directSwapperCall(address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed."
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token."
      },
      "removeSwapper(address)": {
        "notice": "Remove a swapper from the list of allowed swappers."
      },
      "swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes)": {
        "notice": "Calls a swapper contract and then calls xcall on connext"
      },
      "swapAndXCall(address,address,uint256,address,bytes,uint32,address,address,uint256,bytes,uint256)": {
        "notice": "Calls a swapper contract and then calls xcall on connext"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1334,
        "contract": "contracts/origin/Swap/SwapAndXCall.sol:SwapAndXCall",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1447,
        "contract": "contracts/origin/Swap/SwapAndXCall.sol:SwapAndXCall",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4944,
        "contract": "contracts/origin/Swap/SwapAndXCall.sol:SwapAndXCall",
        "label": "allowedSwappers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4050,
        "contract": "contracts/origin/Swap/SwapAndXCall.sol:SwapAndXCall",
        "label": "connext",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IConnext)10101"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConnext)10101": {
        "encoding": "inplace",
        "label": "contract IConnext",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}