{
  "address": "0x1135Cc96A7E9d8f161BE8B6bDB74F896A9658a08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniV3Router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "swapETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Router",
      "outputs": [
        {
          "internalType": "contract ISmartRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe1e534368547f7f788a7a13cffb332524edc5a3d4438af1f430a0df266ffd86f",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0x1135Cc96A7E9d8f161BE8B6bDB74F896A9658a08",
    "transactionIndex": 0,
    "gasUsed": "589197",
    "logsBloom": "0x
    "blockHash": "0x1b898971a9af5dd1cf15fa6db9146ed5f1c83a31a969fc7955d9dd9da30a7883",
    "transactionHash": "0xe1e534368547f7f788a7a13cffb332524edc5a3d4438af1f430a0df266ffd86f",
    "logs": [],
    "blockNumber": 97005681,
    "cumulativeGasUsed": "589197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 1,
  "solcInputHash": "5baa44abeea841b29c26c38421b92a9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniV3Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"swapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Router\",\"outputs\":[{\"internalType\":\"contract ISmartRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swap(uint256,address,address,bytes)\":{\"details\":\"Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.\",\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the UniV3 router.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"swapETH(uint256,address,bytes)\":{\"details\":\"Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.\",\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_swapData\":\"Data to pass to the UniV3 router.\",\"_toAsset\":\"Address of the token to swap to.\"}}},\"title\":\"UniV3Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swap(uint256,address,address,bytes)\":{\"notice\":\"Swap the given amount of tokens using UniV3.\"},\"swapETH(uint256,address,bytes)\":{\"notice\":\"Swap the given amount of ETH using UniV3Swapper.\"}},\"notice\":\"Swapper contract for UniV3 swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shared/Swap/Uniswap/UniV3Swapper.sol\":\"UniV3Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":connext-interfaces/=lib/connext-interfaces/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":vulcan/=lib/vulcan/src/\"],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/Swap/Uniswap/UniV3Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {ISmartRouter, ISwapRouter} from \\\"../interfaces/ISmartRouter.sol\\\";\\nimport {ISwapper} from \\\"../interfaces/ISwapper.sol\\\";\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\n\\n/**\\n * @title UniV3Swapper\\n * @notice Swapper contract for UniV3 swaps.\\n */\\ncontract UniV3Swapper is ISwapper {\\n  ISmartRouter public immutable uniswapV3Router;\\n\\n  constructor(address _uniV3Router) {\\n    uniswapV3Router = ISmartRouter(_uniV3Router);\\n  }\\n\\n  /**\\n   * @notice Swap the given amount of tokens using UniV3.\\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\\n   * until the funds are transferred to this contract.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the UniV3 router.\\n   */\\n  function swap(\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData\\n  ) external override returns (uint256 amountOut) {\\n    // transfer the funds to be swapped from the sender into this contract\\n    TransferHelper.safeTransferFrom(_fromAsset, msg.sender, address(this), _amountIn);\\n\\n    (uint24 poolFee, uint256 amountOutMin) = abi.decode(_swapData, (uint24, uint256));\\n\\n    if (_fromAsset != _toAsset) {\\n      TransferHelper.safeApprove(_fromAsset, address(uniswapV3Router), _amountIn);\\n\\n      bool toNative = _toAsset == address(0);\\n      IWETH9 weth9 = IWETH9(uniswapV3Router.WETH9());\\n\\n      // Set up uniswap swap params.\\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n        tokenIn: _fromAsset,\\n        tokenOut: toNative ? address(weth9) : _toAsset,\\n        fee: poolFee,\\n        recipient: address(this),\\n        deadline: block.timestamp,\\n        amountIn: _amountIn,\\n        amountOutMinimum: amountOutMin,\\n        sqrtPriceLimitX96: 0\\n      });\\n\\n      // The call to `exactInputSingle` executes the swap.\\n      amountOut = uniswapV3Router.exactInputSingle(params);\\n\\n      if (toNative) {\\n        weth9.withdraw(amountOut);\\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\\n      } else {\\n        TransferHelper.safeTransfer(_toAsset, msg.sender, amountOut);\\n      }\\n    } else {\\n      amountOut = _amountIn;\\n      TransferHelper.safeTransfer(_toAsset, msg.sender, amountOut);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swap the given amount of ETH using UniV3Swapper.\\n   * @dev Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known\\n   * until the funds are transferred to this contract.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the UniV3 router.\\n   */\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _toAsset,\\n    bytes calldata _swapData\\n  ) external payable override returns (uint256 amountOut) {\\n    // check if msg.value is same as amountIn\\n    require(msg.value >= _amountIn, \\\"PancakeV3Swapper: msg.value != _amountIn\\\");\\n\\n    (uint24 poolFee, uint256 amountOutMin) = abi.decode(_swapData, (uint24, uint256));\\n\\n    IWETH9 weth9 = IWETH9(uniswapV3Router.WETH9());\\n    if (_toAsset != address(0)) {\\n      weth9.deposit{value: _amountIn}();\\n\\n      // Set up uniswap swap params.\\n      ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n        tokenIn: address(weth9),\\n        tokenOut: _toAsset,\\n        fee: poolFee,\\n        recipient: msg.sender,\\n        deadline: block.timestamp,\\n        amountIn: _amountIn,\\n        amountOutMinimum: amountOutMin,\\n        sqrtPriceLimitX96: 0\\n      });\\n\\n      // The call to `exactInputSingle` executes the swap.\\n      amountOut = uniswapV3Router.exactInputSingle(params);\\n    } else {\\n      amountOut = _amountIn;\\n      TransferHelper.safeTransferETH(msg.sender, amountOut);\\n    }\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0xef982c16f228f4f690e0ca15eab19036e106b0302b50ecd7734c41b9da77de06\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/interfaces/ISmartRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.17;\\npragma abicoder v2;\\n\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {IPeripheryPayments} from \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport {IPeripheryImmutableState} from \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\\\";\\n\\n/// @title Router token swapping functionality\\ninterface ISmartRouter is ISwapRouter, IPeripheryPayments, IPeripheryImmutableState {\\n\\n}\\n\",\"keccak256\":\"0xa0235cad75b1f424cb0046b3f3bfe57d05f371cb1923c7c9c418e4f188153c50\",\"license\":\"GPL-2.0-or-later\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function swap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external returns (uint256 amountOut);\\n\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x444fec1912aaa57621d4bd37f2a77489796668ae8e6e5bff6100d28ea02ae773\",\"license\":\"Unlicense\"},\"contracts/shared/Swap/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n  /// @notice Deposit ether to get wrapped ether\\n  function deposit() external payable;\\n\\n  /// @notice Withdraw wrapped ether to get ether\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xe8c42e9f91c89fd6afe00829c9d2ad945021ea798eb9f854752c534dbf497c7d\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a03461007957601f610a3e38819003918201601f19168301916001600160401b0383118484101761007e5780849260209460405283398101031261007957516001600160a01b03811690819003610079576080526040516109a99081610095823960805181818160b301528181610389015261067e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260049081361015610022575b505050361561002057600080fd5b005b600092833560e01c9081632c76d7a61461066a57508063a2c554d3146102a45763f6b13d3f036100125760603660031901126102a05781356100626106ad565b9360443567ffffffffffffffff811161029c5761008290369086016106c3565b8334106102485790610096918101906106f1565b84516312a9293f60e21b8152919660209690926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116939189818581885afa9081156101f557908291889161021b575b501694169586151560001461020357843b156101ff578751630d0e30db60e41b815299868b8581858a5af19a8b156101f5578a9b9a9798999a6101db575b5062ffffff9061018498998b519761014389610713565b885288880152168986015233606086015242608086015260a085015260c08401528560e084015285875180968195829463414bf38960e01b8452830161079b565b03925af19182156101d0579161019e575b50905b51908152f35b90508281813d83116101c9575b6101b5818361075a565b810103126101c4575138610195565b600080fd5b503d6101ab565b8351903d90823e3d90fd5b90610184986101ed62ffffff93610746565b98509061012c565b89513d89823e3d90fd5b8580fd5b979850505050505050610216823361090c565b610198565b61023b91508b3d8d11610241575b610233818361075a565b81019061077c565b386100ee565b503d610229565b845162461bcd60e51b8152602081880152602860248201527f50616e63616b655633537761707065723a206d73672e76616c756520213d205f60448201526730b6b7bab73a24b760c11b6064820152608490fd5b5080fd5b8280fd5b5082903461029c57608036600319011261029c578235916102c36106ad565b936001600160a01b03604435818116959192908681036106665767ffffffffffffffff92606435848111610662576102fe90369085016106c3565b999088519a60209b8c8101906323b872dd60e01b8252602498338a8301523060448301528660648301526064825260a082019082821090821117610650578c52518a9182919082875af1610350610802565b81610620575b50156105f85790610369918101906106f1565b9099828816928c8483146105df578b5163095ea7b360e01b9181019182527f00000000000000000000000000000000000000000000000000000000000000008b166001600160a01b0381168b830190815260208101899052909794938d9384939192909184916103e79082906040015b03601f19810183528261075a565b51925af18d6103f4610802565b826105ad575b50501561058557159a8a516312a9293f60e21b81528d818981895afa90811561057b57928d8f96938c8f97948f9d9c9b9a978e9161055e575b50169c6104959762ffffff938f901561055657905b519661045388610713565b87521688860152168d84015230606084015242608084015260a083015260c08201528760e08201528a51998a8094819363414bf38960e01b835289830161079b565b03925af195861561054c578496610519575b5085976000146105085750833b156102a057829185918388519687948593632e1a7d4d60e01b85528401525af19081156104fd57509061019892916104ee575b503361090c565b6104f790610746565b856104e7565b8451903d90823e3d90fd5b92505050610216929150339061085a565b9095508881813d8311610545575b610531818361075a565b81010312610541575194896104a7565b8380fd5b503d610527565b87513d86823e3d90fd5b508a90610448565b61057591508a3d8c1161024157610233818361075a565b38610433565b8c513d8d823e3d90fd5b50895162461bcd60e51b81528087018d905260028189015261534160f01b6044820152606490fd5b80919250519182159283156105c7575b5050508d8f6103fa565b6105d79350820181019101610842565b8e8e816105bd565b505050505093509550505061021691508093339061085a565b895162461bcd60e51b81528087018d90526003818901526229aa2360e91b6044820152606490fd5b8051801592508e908315610638575b5050508d610356565b6106489350820181019101610842565b8d8d8161062f565b634e487b7160e01b8c5260418952898cfd5b8680fd5b8480fd5b84903461029c578160031936011261029c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b602435906001600160a01b03821682036101c457565b9181601f840112156101c45782359167ffffffffffffffff83116101c457602083818601950101116101c457565b91908260409103126101c457813562ffffff811681036101c457916020013590565b610100810190811067ffffffffffffffff82111761073057604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161073057604052565b90601f8019910116810190811067ffffffffffffffff82111761073057604052565b908160209103126101c457516001600160a01b03811681036101c45790565b91909160e06101008201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b3d1561083d573d9067ffffffffffffffff82116107305760405191610831601f8201601f19166020018461075a565b82523d6000602084013e565b606090565b908160209103126101c4575180151581036101c45790565b60405163a9059cbb60e01b602082019081526001600160a01b0390931660248201526044810193909352600092839290839061089981606481016103d9565b51925af16108a5610802565b816108dd575b50156108b357565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b80518015925082156108f2575b5050386108ab565b6109059250602080918301019101610842565b38806108ea565b604051602081019080821067ffffffffffffffff831117610730576000938493848094938194604052525af1610940610802565b501561094857565b60405162461bcd60e51b815260206004820152600360248201526253544560e81b6044820152606490fdfea26469706673582212202fbf90130212475c1efb21e65e95a9c32cdbb7b66e2e7f35e284ae74909b04a264736f6c63430008130033",
  "deployedBytecode": "0x6080604081815260049081361015610022575b505050361561002057600080fd5b005b600092833560e01c9081632c76d7a61461066a57508063a2c554d3146102a45763f6b13d3f036100125760603660031901126102a05781356100626106ad565b9360443567ffffffffffffffff811161029c5761008290369086016106c3565b8334106102485790610096918101906106f1565b84516312a9293f60e21b8152919660209690926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116939189818581885afa9081156101f557908291889161021b575b501694169586151560001461020357843b156101ff578751630d0e30db60e41b815299868b8581858a5af19a8b156101f5578a9b9a9798999a6101db575b5062ffffff9061018498998b519761014389610713565b885288880152168986015233606086015242608086015260a085015260c08401528560e084015285875180968195829463414bf38960e01b8452830161079b565b03925af19182156101d0579161019e575b50905b51908152f35b90508281813d83116101c9575b6101b5818361075a565b810103126101c4575138610195565b600080fd5b503d6101ab565b8351903d90823e3d90fd5b90610184986101ed62ffffff93610746565b98509061012c565b89513d89823e3d90fd5b8580fd5b979850505050505050610216823361090c565b610198565b61023b91508b3d8d11610241575b610233818361075a565b81019061077c565b386100ee565b503d610229565b845162461bcd60e51b8152602081880152602860248201527f50616e63616b655633537761707065723a206d73672e76616c756520213d205f60448201526730b6b7bab73a24b760c11b6064820152608490fd5b5080fd5b8280fd5b5082903461029c57608036600319011261029c578235916102c36106ad565b936001600160a01b03604435818116959192908681036106665767ffffffffffffffff92606435848111610662576102fe90369085016106c3565b999088519a60209b8c8101906323b872dd60e01b8252602498338a8301523060448301528660648301526064825260a082019082821090821117610650578c52518a9182919082875af1610350610802565b81610620575b50156105f85790610369918101906106f1565b9099828816928c8483146105df578b5163095ea7b360e01b9181019182527f00000000000000000000000000000000000000000000000000000000000000008b166001600160a01b0381168b830190815260208101899052909794938d9384939192909184916103e79082906040015b03601f19810183528261075a565b51925af18d6103f4610802565b826105ad575b50501561058557159a8a516312a9293f60e21b81528d818981895afa90811561057b57928d8f96938c8f97948f9d9c9b9a978e9161055e575b50169c6104959762ffffff938f901561055657905b519661045388610713565b87521688860152168d84015230606084015242608084015260a083015260c08201528760e08201528a51998a8094819363414bf38960e01b835289830161079b565b03925af195861561054c578496610519575b5085976000146105085750833b156102a057829185918388519687948593632e1a7d4d60e01b85528401525af19081156104fd57509061019892916104ee575b503361090c565b6104f790610746565b856104e7565b8451903d90823e3d90fd5b92505050610216929150339061085a565b9095508881813d8311610545575b610531818361075a565b81010312610541575194896104a7565b8380fd5b503d610527565b87513d86823e3d90fd5b508a90610448565b61057591508a3d8c1161024157610233818361075a565b38610433565b8c513d8d823e3d90fd5b50895162461bcd60e51b81528087018d905260028189015261534160f01b6044820152606490fd5b80919250519182159283156105c7575b5050508d8f6103fa565b6105d79350820181019101610842565b8e8e816105bd565b505050505093509550505061021691508093339061085a565b895162461bcd60e51b81528087018d90526003818901526229aa2360e91b6044820152606490fd5b8051801592508e908315610638575b5050508d610356565b6106489350820181019101610842565b8d8d8161062f565b634e487b7160e01b8c5260418952898cfd5b8680fd5b8480fd5b84903461029c578160031936011261029c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b602435906001600160a01b03821682036101c457565b9181601f840112156101c45782359167ffffffffffffffff83116101c457602083818601950101116101c457565b91908260409103126101c457813562ffffff811681036101c457916020013590565b610100810190811067ffffffffffffffff82111761073057604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161073057604052565b90601f8019910116810190811067ffffffffffffffff82111761073057604052565b908160209103126101c457516001600160a01b03811681036101c45790565b91909160e06101008201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a086015260c081015160c0860152015116910152565b3d1561083d573d9067ffffffffffffffff82116107305760405191610831601f8201601f19166020018461075a565b82523d6000602084013e565b606090565b908160209103126101c4575180151581036101c45790565b60405163a9059cbb60e01b602082019081526001600160a01b0390931660248201526044810193909352600092839290839061089981606481016103d9565b51925af16108a5610802565b816108dd575b50156108b357565b60405162461bcd60e51b815260206004820152600260248201526114d560f21b6044820152606490fd5b80518015925082156108f2575b5050386108ab565b6109059250602080918301019101610842565b38806108ea565b604051602081019080821067ffffffffffffffff831117610730576000938493848094938194604052525af1610940610802565b501561094857565b60405162461bcd60e51b815260206004820152600360248201526253544560e81b6044820152606490fdfea26469706673582212202fbf90130212475c1efb21e65e95a9c32cdbb7b66e2e7f35e284ae74909b04a264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swap(uint256,address,address,bytes)": {
        "details": "Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.",
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the UniV3 router.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "swapETH(uint256,address,bytes)": {
        "details": "Decode the passed in data and re-encode it with the correct amountIn. This is because the amountIn is not known until the funds are transferred to this contract.",
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_swapData": "Data to pass to the UniV3 router.",
          "_toAsset": "Address of the token to swap to."
        }
      }
    },
    "title": "UniV3Swapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swap(uint256,address,address,bytes)": {
        "notice": "Swap the given amount of tokens using UniV3."
      },
      "swapETH(uint256,address,bytes)": {
        "notice": "Swap the given amount of ETH using UniV3Swapper."
      }
    },
    "notice": "Swapper contract for UniV3 swaps.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}