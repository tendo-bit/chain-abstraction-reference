{
  "address": "0xFacE86B9F34230624Cf48eb582aFf4BbA970EdCD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "poolFee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWeth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "inputAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "connextAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "connextSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "sourcePoolFee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xDeposit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0a8a37bb5f369d6145d8946c0279d9bb7719f73b4cb3df8186f49fa8a07c27b0",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0xFacE86B9F34230624Cf48eb582aFf4BbA970EdCD",
    "transactionIndex": 0,
    "gasUsed": "1248793",
    "logsBloom": "0x
    "blockHash": "0x8d5ce23242ad2a200ecc35b8b3f2689e1f17104efb151ae61e3da5ccad95ca71",
    "transactionHash": "0x0a8a37bb5f369d6145d8946c0279d9bb7719f73b4cb3df8186f49fa8a07c27b0",
    "logs": [],
    "blockNumber": 82408321,
    "cumulativeGasUsed": "1248793",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8f7492DE823025b4CfaAB1D34c58963F2af5DEDA",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "a13eda5e7ab793ea89fd459232540e0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"inputAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"connextAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"connextSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"sourcePoolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xDeposit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapRouter()\":{\"notice\":\"UniswapV3 swap router contract to swap\"},\"weth()\":{\"notice\":\"WETH address to handle native assets before swapping / sending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MeanFinance/MeanFinanceSource.sol\":\"MeanFinanceSource\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b0676707cecd45da82623f18f73bd6bb733acae56dd7bd893f15c0dc08ea391\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IWeth {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 value) external;\\n}\\n\",\"keccak256\":\"0xe8d4d4d6b4c4bbad50270f6c5f17b249cad1faafdca579bbdb3d9b6cf74289d2\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/MeanFinance/MeanFinanceSource.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IConnext, TokenId} from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport {IWeth} from \\\"@connext/interfaces/core/IWeth.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Uniswap/UniswapAdapter.sol\\\";\\n\\ncontract MeanFinanceSource is UniswapAdapter {\\n    // The Connext contract on this domain\\n    IConnext public immutable connext;\\n    /// @notice WETH address to handle native assets before swapping / sending.\\n    IWeth public immutable weth;\\n\\n    receive() external payable virtual override(UniswapAdapter) {}\\n\\n    constructor(address _connext, address _weth) {\\n        connext = IConnext(_connext);\\n        weth = IWeth(_weth);\\n    }\\n\\n    function xDeposit(\\n        address target,\\n        uint32 destinationDomain,\\n        address inputAsset,\\n        address connextAsset,\\n        uint256 amountIn,\\n        uint256 connextSlippage,\\n        uint24 sourcePoolFee,\\n        uint256 sourceAmountOutMin,\\n        bytes memory _callData\\n    ) external payable returns (bytes32 transferId) {\\n        // Sanity check: amounts above mins\\n        require(amountIn > 0, \\\"!amount\\\");\\n\\n        uint256 amountOut = amountIn;\\n\\n        // wrap origin asset if needed\\n        if (inputAsset == address(0)) {\\n            weth.deposit{value: amountIn}();\\n            inputAsset = address(weth);\\n        } else {\\n            TransferHelper.safeTransferFrom(inputAsset, msg.sender, address(this), amountIn);\\n        }\\n\\n        // swap to donation asset if needed\\n        if (inputAsset != connextAsset) {\\n            require(connextApprovedAssets(connextAsset), \\\"!connextAsset\\\");\\n            amountOut = swap(\\n                inputAsset,\\n                connextAsset,\\n                sourcePoolFee,\\n                amountIn,\\n                sourceAmountOutMin\\n            );\\n        }\\n\\n        TransferHelper.safeApprove(connextAsset, address(connext), amountOut);\\n        // xcall\\n        // Perform connext transfer\\n        transferId = connext.xcall{value: msg.value}(\\n            destinationDomain, //\\n            target, //\\n            connextAsset, //\\n            msg.sender, //\\n            amountOut, //\\n            connextSlippage, //\\n            _callData //\\n        );\\n    }\\n\\n    /// INTERNAL\\n    function connextApprovedAssets(\\n        address adopted\\n    ) internal view returns (bool approved) {\\n        TokenId memory canonical = connext.adoptedToCanonical(adopted);\\n        approved = connext.approvedAssets(canonical);\\n    }\\n}\\n\",\"keccak256\":\"0xd5956d1d855d90b75179c4ac5ad0b3dcfa98c9b3084002df08c5f56310348ede\",\"license\":\"UNLICENSED\"},\"contracts/Uniswap/UniswapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\ncontract UniswapAdapter {\\n    /// @notice UniswapV3 swap router contract to swap\\n    /// @dev If deploying to celo, change hardcoded address. see https://docs.uniswap.org/contracts/v3/reference/deployments\\n    ISwapRouter public immutable swapRouter =\\n        ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n    /// Payable\\n    receive() virtual external payable {}\\n\\n    function swap(\\n        address fromAsset,\\n        address toAsset,\\n        uint24 poolFee,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) public returns (uint256 amountOut) {\\n        // Approve the uniswap router to spend fromAsset.\\n        TransferHelper.safeApprove(fromAsset, address(swapRouter), amountIn);\\n        // Set up uniswap swap params.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\n            .ExactInputSingleParams({\\n                tokenIn: fromAsset,\\n                tokenOut: toAsset,\\n                fee: poolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: amountOutMin,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0x21b6d9d64664b8b8823f48a768f513577e1831ca2cf933fb708de4892db0bf55\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e060405273e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200005857600080fd5b50604051620017a2380380620017a283398181016040528101906200007e919062000158565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050506200019f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012082620000f3565b9050919050565b620001328162000113565b81146200013e57600080fd5b50565b600081519050620001528162000127565b92915050565b60008060408385031215620001725762000171620000ee565b5b6000620001828582860162000141565b9250506020620001958582860162000141565b9150509250929050565b60805160a05160c05161159b62000207600039600081816102bb0152818161035c01526103dd0152600081816104a1015281816104c8015281816105a5015281816108790152610914015260008181610150015281816102130152610581015261159b6000f3fe60806040526004361061004e5760003560e01c80633bf237d51461005a5780633fc8cef314610097578063c2c08306146100c2578063c31c9c07146100f2578063de4b05481461011d57610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610a97565b610148565b60405161008e9190610b21565b60405180910390f35b3480156100a357600080fd5b506100ac6102b9565b6040516100b99190610b9b565b60405180910390f35b6100dc60048036038101906100d79190610d38565b6102dd565b6040516100e99190610e37565b60405180910390f35b3480156100fe57600080fd5b5061010761057f565b6040516101149190610e73565b60405180910390f35b34801561012957600080fd5b506101326105a3565b60405161013f9190610eaf565b60405180910390f35b6000610175867f0000000000000000000000000000000000000000000000000000000000000000856105c7565b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018662ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161026a9190610fa8565b6020604051808303816000875af1158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610fd9565b91505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808611610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890611063565b60405180910390fd5b6000869050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1603610403577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000009850610410565b61040f8933308a61071c565b5b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461049b5761044c88610874565b61048b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610482906110cf565b60405180910390fd5b6104988989878a88610148565b90505b6104c6887f0000000000000000000000000000000000000000000000000000000000000000836105c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638aac16ba348c8e8c33878d8b6040518963ffffffff1660e01b815260040161052c979695949392919061118c565b60206040518083038185885af115801561054a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061056f919061122e565b9150509998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016105fc92919061125b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161066691906112c0565b6000604051808303816000865af19150503d80600081146106a3576040519150601f19603f3d011682016040523d82523d6000602084013e6106a8565b606091505b50915091508180156106d657506000815114806106d55750808060200190518101906106d4919061130f565b5b5b610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070c90611388565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610753939291906113a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107bd91906112c0565b6000604051808303816000865af19150503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b509150915081801561082d575060008151148061082c57508080602001905181019061082b919061130f565b5b5b61086c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108639061142b565b60405180910390fd5b505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166360062091846040518263ffffffff1660e01b81526004016108d0919061144b565b6040805180830381865afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091091906114d0565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ae8bc0de826040518263ffffffff1660e01b815260040161096b919061154a565b602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061130f565b915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109f3826109c8565b9050919050565b610a03816109e8565b8114610a0e57600080fd5b50565b600081359050610a20816109fa565b92915050565b600062ffffff82169050919050565b610a3e81610a26565b8114610a4957600080fd5b50565b600081359050610a5b81610a35565b92915050565b6000819050919050565b610a7481610a61565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600080600080600060a08688031215610ab357610ab26109be565b5b6000610ac188828901610a11565b9550506020610ad288828901610a11565b9450506040610ae388828901610a4c565b9350506060610af488828901610a82565b9250506080610b0588828901610a82565b9150509295509295909350565b610b1b81610a61565b82525050565b6000602082019050610b366000830184610b12565b92915050565b6000819050919050565b6000610b61610b5c610b57846109c8565b610b3c565b6109c8565b9050919050565b6000610b7382610b46565b9050919050565b6000610b8582610b68565b9050919050565b610b9581610b7a565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b600063ffffffff82169050919050565b610bcf81610bb6565b8114610bda57600080fd5b50565b600081359050610bec81610bc6565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c4582610bfc565b810181811067ffffffffffffffff82111715610c6457610c63610c0d565b5b80604052505050565b6000610c776109b4565b9050610c838282610c3c565b919050565b600067ffffffffffffffff821115610ca357610ca2610c0d565b5b610cac82610bfc565b9050602081019050919050565b82818337600083830152505050565b6000610cdb610cd684610c88565b610c6d565b905082815260208101848484011115610cf757610cf6610bf7565b5b610d02848285610cb9565b509392505050565b600082601f830112610d1f57610d1e610bf2565b5b8135610d2f848260208601610cc8565b91505092915050565b60008060008060008060008060006101208a8c031215610d5b57610d5a6109be565b5b6000610d698c828d01610a11565b9950506020610d7a8c828d01610bdd565b9850506040610d8b8c828d01610a11565b9750506060610d9c8c828d01610a11565b9650506080610dad8c828d01610a82565b95505060a0610dbe8c828d01610a82565b94505060c0610dcf8c828d01610a4c565b93505060e0610de08c828d01610a82565b9250506101008a013567ffffffffffffffff811115610e0257610e016109c3565b5b610e0e8c828d01610d0a565b9150509295985092959850929598565b6000819050919050565b610e3181610e1e565b82525050565b6000602082019050610e4c6000830184610e28565b92915050565b6000610e5d82610b68565b9050919050565b610e6d81610e52565b82525050565b6000602082019050610e886000830184610e64565b92915050565b6000610e9982610b68565b9050919050565b610ea981610e8e565b82525050565b6000602082019050610ec46000830184610ea0565b92915050565b610ed3816109e8565b82525050565b610ee281610a26565b82525050565b610ef181610a61565b82525050565b610f00816109c8565b82525050565b61010082016000820151610f1d6000850182610eca565b506020820151610f306020850182610eca565b506040820151610f436040850182610ed9565b506060820151610f566060850182610eca565b506080820151610f696080850182610ee8565b5060a0820151610f7c60a0850182610ee8565b5060c0820151610f8f60c0850182610ee8565b5060e0820151610fa260e0850182610ef7565b50505050565b600061010082019050610fbe6000830184610f06565b92915050565b600081519050610fd381610a6b565b92915050565b600060208284031215610fef57610fee6109be565b5b6000610ffd84828501610fc4565b91505092915050565b600082825260208201905092915050565b7f21616d6f756e7400000000000000000000000000000000000000000000000000600082015250565b600061104d600783611006565b915061105882611017565b602082019050919050565b6000602082019050818103600083015261107c81611040565b9050919050565b7f21636f6e6e657874417373657400000000000000000000000000000000000000600082015250565b60006110b9600d83611006565b91506110c482611083565b602082019050919050565b600060208201905081810360008301526110e8816110ac565b9050919050565b6110f881610bb6565b82525050565b611107816109e8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114757808201518184015260208101905061112c565b60008484015250505050565b600061115e8261110d565b6111688185611118565b9350611178818560208601611129565b61118181610bfc565b840191505092915050565b600060e0820190506111a1600083018a6110ef565b6111ae60208301896110fe565b6111bb60408301886110fe565b6111c860608301876110fe565b6111d56080830186610b12565b6111e260a0830185610b12565b81810360c08301526111f48184611153565b905098975050505050505050565b61120b81610e1e565b811461121657600080fd5b50565b60008151905061122881611202565b92915050565b600060208284031215611244576112436109be565b5b600061125284828501611219565b91505092915050565b600060408201905061127060008301856110fe565b61127d6020830184610b12565b9392505050565b600081905092915050565b600061129a8261110d565b6112a48185611284565b93506112b4818560208601611129565b80840191505092915050565b60006112cc828461128f565b915081905092915050565b60008115159050919050565b6112ec816112d7565b81146112f757600080fd5b50565b600081519050611309816112e3565b92915050565b600060208284031215611325576113246109be565b5b6000611333848285016112fa565b91505092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000611372600283611006565b915061137d8261133c565b602082019050919050565b600060208201905081810360008301526113a181611365565b9050919050565b60006060820190506113bd60008301866110fe565b6113ca60208301856110fe565b6113d76040830184610b12565b949350505050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000611415600383611006565b9150611420826113df565b602082019050919050565b6000602082019050818103600083015261144481611408565b9050919050565b600060208201905061146060008301846110fe565b92915050565b600080fd5b60008151905061147a81610bc6565b92915050565b60006040828403121561149657611495611466565b5b6114a06040610c6d565b905060006114b08482850161146b565b60008301525060206114c484828501611219565b60208301525092915050565b6000604082840312156114e6576114e56109be565b5b60006114f484828501611480565b91505092915050565b61150681610bb6565b82525050565b61151581610e1e565b82525050565b60408201600082015161153160008501826114fd565b506020820151611544602085018261150c565b50505050565b600060408201905061155f600083018461151b565b9291505056fea2646970667358221220f62c39d7622359787f0d2fdd0a44fba7d898d2a35bee9e1068d287d3bf0c1fe564736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80633bf237d51461005a5780633fc8cef314610097578063c2c08306146100c2578063c31c9c07146100f2578063de4b05481461011d57610055565b3661005557005b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610a97565b610148565b60405161008e9190610b21565b60405180910390f35b3480156100a357600080fd5b506100ac6102b9565b6040516100b99190610b9b565b60405180910390f35b6100dc60048036038101906100d79190610d38565b6102dd565b6040516100e99190610e37565b60405180910390f35b3480156100fe57600080fd5b5061010761057f565b6040516101149190610e73565b60405180910390f35b34801561012957600080fd5b506101326105a3565b60405161013f9190610eaf565b60405180910390f35b6000610175867f0000000000000000000000000000000000000000000000000000000000000000856105c7565b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018662ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001858152602001848152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161026a9190610fa8565b6020604051808303816000875af1158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610fd9565b91505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808611610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890611063565b60405180910390fd5b6000869050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1603610403577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0886040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000009850610410565b61040f8933308a61071c565b5b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461049b5761044c88610874565b61048b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610482906110cf565b60405180910390fd5b6104988989878a88610148565b90505b6104c6887f0000000000000000000000000000000000000000000000000000000000000000836105c7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638aac16ba348c8e8c33878d8b6040518963ffffffff1660e01b815260040161052c979695949392919061118c565b60206040518083038185885af115801561054a573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061056f919061122e565b9150509998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016105fc92919061125b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161066691906112c0565b6000604051808303816000865af19150503d80600081146106a3576040519150601f19603f3d011682016040523d82523d6000602084013e6106a8565b606091505b50915091508180156106d657506000815114806106d55750808060200190518101906106d4919061130f565b5b5b610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070c90611388565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610753939291906113a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107bd91906112c0565b6000604051808303816000865af19150503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b509150915081801561082d575060008151148061082c57508080602001905181019061082b919061130f565b5b5b61086c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108639061142b565b60405180910390fd5b505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166360062091846040518263ffffffff1660e01b81526004016108d0919061144b565b6040805180830381865afa1580156108ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091091906114d0565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ae8bc0de826040518263ffffffff1660e01b815260040161096b919061154a565b602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061130f565b915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109f3826109c8565b9050919050565b610a03816109e8565b8114610a0e57600080fd5b50565b600081359050610a20816109fa565b92915050565b600062ffffff82169050919050565b610a3e81610a26565b8114610a4957600080fd5b50565b600081359050610a5b81610a35565b92915050565b6000819050919050565b610a7481610a61565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600080600080600060a08688031215610ab357610ab26109be565b5b6000610ac188828901610a11565b9550506020610ad288828901610a11565b9450506040610ae388828901610a4c565b9350506060610af488828901610a82565b9250506080610b0588828901610a82565b9150509295509295909350565b610b1b81610a61565b82525050565b6000602082019050610b366000830184610b12565b92915050565b6000819050919050565b6000610b61610b5c610b57846109c8565b610b3c565b6109c8565b9050919050565b6000610b7382610b46565b9050919050565b6000610b8582610b68565b9050919050565b610b9581610b7a565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b600063ffffffff82169050919050565b610bcf81610bb6565b8114610bda57600080fd5b50565b600081359050610bec81610bc6565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c4582610bfc565b810181811067ffffffffffffffff82111715610c6457610c63610c0d565b5b80604052505050565b6000610c776109b4565b9050610c838282610c3c565b919050565b600067ffffffffffffffff821115610ca357610ca2610c0d565b5b610cac82610bfc565b9050602081019050919050565b82818337600083830152505050565b6000610cdb610cd684610c88565b610c6d565b905082815260208101848484011115610cf757610cf6610bf7565b5b610d02848285610cb9565b509392505050565b600082601f830112610d1f57610d1e610bf2565b5b8135610d2f848260208601610cc8565b91505092915050565b60008060008060008060008060006101208a8c031215610d5b57610d5a6109be565b5b6000610d698c828d01610a11565b9950506020610d7a8c828d01610bdd565b9850506040610d8b8c828d01610a11565b9750506060610d9c8c828d01610a11565b9650506080610dad8c828d01610a82565b95505060a0610dbe8c828d01610a82565b94505060c0610dcf8c828d01610a4c565b93505060e0610de08c828d01610a82565b9250506101008a013567ffffffffffffffff811115610e0257610e016109c3565b5b610e0e8c828d01610d0a565b9150509295985092959850929598565b6000819050919050565b610e3181610e1e565b82525050565b6000602082019050610e4c6000830184610e28565b92915050565b6000610e5d82610b68565b9050919050565b610e6d81610e52565b82525050565b6000602082019050610e886000830184610e64565b92915050565b6000610e9982610b68565b9050919050565b610ea981610e8e565b82525050565b6000602082019050610ec46000830184610ea0565b92915050565b610ed3816109e8565b82525050565b610ee281610a26565b82525050565b610ef181610a61565b82525050565b610f00816109c8565b82525050565b61010082016000820151610f1d6000850182610eca565b506020820151610f306020850182610eca565b506040820151610f436040850182610ed9565b506060820151610f566060850182610eca565b506080820151610f696080850182610ee8565b5060a0820151610f7c60a0850182610ee8565b5060c0820151610f8f60c0850182610ee8565b5060e0820151610fa260e0850182610ef7565b50505050565b600061010082019050610fbe6000830184610f06565b92915050565b600081519050610fd381610a6b565b92915050565b600060208284031215610fef57610fee6109be565b5b6000610ffd84828501610fc4565b91505092915050565b600082825260208201905092915050565b7f21616d6f756e7400000000000000000000000000000000000000000000000000600082015250565b600061104d600783611006565b915061105882611017565b602082019050919050565b6000602082019050818103600083015261107c81611040565b9050919050565b7f21636f6e6e657874417373657400000000000000000000000000000000000000600082015250565b60006110b9600d83611006565b91506110c482611083565b602082019050919050565b600060208201905081810360008301526110e8816110ac565b9050919050565b6110f881610bb6565b82525050565b611107816109e8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114757808201518184015260208101905061112c565b60008484015250505050565b600061115e8261110d565b6111688185611118565b9350611178818560208601611129565b61118181610bfc565b840191505092915050565b600060e0820190506111a1600083018a6110ef565b6111ae60208301896110fe565b6111bb60408301886110fe565b6111c860608301876110fe565b6111d56080830186610b12565b6111e260a0830185610b12565b81810360c08301526111f48184611153565b905098975050505050505050565b61120b81610e1e565b811461121657600080fd5b50565b60008151905061122881611202565b92915050565b600060208284031215611244576112436109be565b5b600061125284828501611219565b91505092915050565b600060408201905061127060008301856110fe565b61127d6020830184610b12565b9392505050565b600081905092915050565b600061129a8261110d565b6112a48185611284565b93506112b4818560208601611129565b80840191505092915050565b60006112cc828461128f565b915081905092915050565b60008115159050919050565b6112ec816112d7565b81146112f757600080fd5b50565b600081519050611309816112e3565b92915050565b600060208284031215611325576113246109be565b5b6000611333848285016112fa565b91505092915050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b6000611372600283611006565b915061137d8261133c565b602082019050919050565b600060208201905081810360008301526113a181611365565b9050919050565b60006060820190506113bd60008301866110fe565b6113ca60208301856110fe565b6113d76040830184610b12565b949350505050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000611415600383611006565b9150611420826113df565b602082019050919050565b6000602082019050818103600083015261144481611408565b9050919050565b600060208201905061146060008301846110fe565b92915050565b600080fd5b60008151905061147a81610bc6565b92915050565b60006040828403121561149657611495611466565b5b6114a06040610c6d565b905060006114b08482850161146b565b60008301525060206114c484828501611219565b60208301525092915050565b6000604082840312156114e6576114e56109be565b5b60006114f484828501611480565b91505092915050565b61150681610bb6565b82525050565b61151581610e1e565b82525050565b60408201600082015161153160008501826114fd565b506020820151611544602085018261150c565b50505050565b600060408201905061155f600083018461151b565b9291505056fea2646970667358221220f62c39d7622359787f0d2fdd0a44fba7d898d2a35bee9e1068d287d3bf0c1fe564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "swapRouter()": {
        "notice": "UniswapV3 swap router contract to swap"
      },
      "weth()": {
        "notice": "WETH address to handle native assets before swapping / sending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
