{
  "address": "0xC825d25123Ca8d49066cf8F0AeE164660056e172",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hub",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForwarderXReceiver__onlyConnext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForwarderXReceiver__prepareAndForward_notThis",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionID",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_errorMessage",
          "type": "string"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_errorCode",
          "type": "uint256"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_lowLevelData",
          "type": "bytes"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "Prepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "addSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedSwappers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "directSwapperCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "exactSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract IDCAHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "prepareAndForward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "removeSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xde5f1c691b136ab7ee46fd41f36ca17c5aa8d320bb8126f4f3f536f73f074d02",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0xC825d25123Ca8d49066cf8F0AeE164660056e172",
    "transactionIndex": 30,
    "gasUsed": "1383877",
    "logsBloom": "0x
    "blockHash": "0x80e7cc3959565073e5cf8932355174cbb80e4a7a4193c0ee4ceff2be55c47029",
    "transactionHash": "0xde5f1c691b136ab7ee46fd41f36ca17c5aa8d320bb8126f4f3f536f73f074d02",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 42335213,
        "transactionHash": "0xde5f1c691b136ab7ee46fd41f36ca17c5aa8d320bb8126f4f3f536f73f074d02",
        "address": "0xC825d25123Ca8d49066cf8F0AeE164660056e172",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x80e7cc3959565073e5cf8932355174cbb80e4a7a4193c0ee4ceff2be55c47029"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 42335213,
        "transactionHash": "0xde5f1c691b136ab7ee46fd41f36ca17c5aa8d320bb8126f4f3f536f73f074d02",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ce7e68d9e8b400000000000000000000000000000000000000000000000014a906a3bdc0fec3e500000000000000000000000000000000000000000000083b2fa8e04da87d3274000000000000000000000000000000000000000000000014a8382554e7160fe500000000000000000000000000000000000000000000083b30775eb68265e674",
        "logIndex": 107,
        "blockHash": "0x80e7cc3959565073e5cf8932355174cbb80e4a7a4193c0ee4ceff2be55c47029"
      }
    ],
    "blockNumber": 42335213,
    "cumulativeGasUsed": "5588133",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11984dc4465481512eb5b777E44061C158CF2259",
    "0xA5AdC5484f9997fBF7D405b9AA62A7d88883C345"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f66c88f93cf4c3d4622bf6dd049af95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForwarderXReceiver__onlyConnext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForwarderXReceiver__prepareAndForward_notThis\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionID\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_errorMessage\",\"type\":\"string\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_errorCode\",\"type\":\"uint256\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_lowLevelData\",\"type\":\"bytes\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"Prepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"addSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSwappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"directSwapperCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"exactSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract IDCAHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"prepareAndForward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"removeSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to add.\"}},\"directSwapperCall(address,bytes)\":{\"params\":{\"_swapper\":\"Address of the swapper to use.\",\"swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router.\"}},\"exactSwap(address,uint256,address,address,bytes)\":{\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.\",\"_swapper\":\"Address of the swapper to use.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"prepareAndForward(bytes32,bytes,uint256,address)\":{\"details\":\"This function is intended to be called by the xReceive function, and should not be called outside of that context. The function is `public` so that it can be used with try-catch.\",\"params\":{\"_amount\":\"- The amount of funds received in this transfer\",\"_asset\":\"- The asset of the funds received in this transfer\",\"_data\":\"- The data to be prepared\",\"_transferId\":\"- The transfer ID of the transfer that triggered this call\"}},\"removeSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"details\":\"_originSender and _origin are not used in this implementation because this is meant for an \\\"unauthenticated\\\" call. This means any router can call this function and no guarantees are made on the data passed in. This should only be used when there are funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no reason to call this function maliciously, because the router would be spending their own funds.\",\"params\":{\"_amount\":\"- The amount of funds received in this transfer.\",\"_asset\":\"- The asset of the funds received in this transfer.\",\"_callData\":\"- The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.\",\"_transferId\":\"- The transfer ID of the transfer that triggered this call.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ForwarderXReceiver__onlyConnext(address)\":[{\"notice\":\"ERRORS\"}]},\"events\":{\"ForwardedFunctionCallFailed(bytes32)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"addSwapper(address)\":{\"notice\":\"Add a swapper to the list of allowed swappers.\"},\"directSwapperCall(address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed.\"},\"exactSwap(address,uint256,address,address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token.\"},\"hub()\":{\"notice\":\"MeanFinance IDCAHub contract for deposit\"},\"prepareAndForward(bytes32,bytes,uint256,address)\":{\"notice\":\"Prepares the data for the function call and forwards it. This can execute any arbitrary function call in a two step process. For example, _prepare can be used to swap funds on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds.\"},\"removeSwapper(address)\":{\"notice\":\"Remove a swapper from the list of allowed swappers.\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integration/MeanFinance/MeanFinanceTarget.sol\":\"MeanFinanceTarget\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":connext-interfaces/=lib/connext-interfaces/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":vulcan/=lib/vulcan/src/\"],\"viaIR\":true},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b0676707cecd45da82623f18f73bd6bb733acae56dd7bd893f15c0dc08ea391\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37a35045d40f3bde688c70bb631581cbc609796514319db1361e061da8d9349b\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol';\\nimport './IDCAPermissionManager.sol';\\n\\n/**\\n * @title The interface for all state related queries\\n * @notice These methods allow users to read the hubs's current values\\n */\\ninterface IDCAHubParameters {\\n  /**\\n   * @notice Returns how much will the amount to swap differ from the previous swap. f.e. if the returned value is -100, then the amount to swap will be 100 less than the swap just before it\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA One of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @param swapIntervalMask The byte representation of the swap interval to check\\n   * @param swapNumber The swap number to check\\n   * @return swapDeltaAToB How much less of token A will the following swap require\\n   * @return swapDeltaBToA How much less of token B will the following swap require\\n   */\\n  function swapAmountDelta(\\n    address tokenA,\\n    address tokenB,\\n    bytes1 swapIntervalMask,\\n    uint32 swapNumber\\n  ) external view returns (uint128 swapDeltaAToB, uint128 swapDeltaBToA);\\n\\n  /**\\n   * @notice Returns the sum of the ratios reported in all swaps executed until the given swap number\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA One of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @param swapIntervalMask The byte representation of the swap interval to check\\n   * @param swapNumber The swap number to check\\n   * @return accumRatioAToB The sum of all ratios from A to B\\n   * @return accumRatioBToA The sum of all ratios from B to A\\n   */\\n  function accumRatio(\\n    address tokenA,\\n    address tokenB,\\n    bytes1 swapIntervalMask,\\n    uint32 swapNumber\\n  ) external view returns (uint256 accumRatioAToB, uint256 accumRatioBToA);\\n\\n  /**\\n   * @notice Returns swapping information about a specific pair\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA One of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @param swapIntervalMask The byte representation of the swap interval to check\\n   * @return performedSwaps How many swaps have been executed\\n   * @return nextAmountToSwapAToB How much of token A will be swapped on the next swap\\n   * @return lastSwappedAt Timestamp of the last swap\\n   * @return nextAmountToSwapBToA How much of token B will be swapped on the next swap\\n   */\\n  function swapData(\\n    address tokenA,\\n    address tokenB,\\n    bytes1 swapIntervalMask\\n  )\\n    external\\n    view\\n    returns (\\n      uint32 performedSwaps,\\n      uint224 nextAmountToSwapAToB,\\n      uint32 lastSwappedAt,\\n      uint224 nextAmountToSwapBToA\\n    );\\n\\n  /**\\n   * @notice Returns the byte representation of the set of actice swap intervals for the given pair\\n   * @dev `tokenA` must be smaller than `tokenB` (tokenA < tokenB)\\n   * @param tokenA The smaller of the pair's token\\n   * @param tokenB The other of the pair's token\\n   * @return The byte representation of the set of actice swap intervals\\n   */\\n  function activeSwapIntervals(address tokenA, address tokenB) external view returns (bytes1);\\n\\n  /**\\n   * @notice Returns how much of the hub's token balance belongs to the platform\\n   * @param token The token to check\\n   * @return The amount that belongs to the platform\\n   */\\n  function platformBalance(address token) external view returns (uint256);\\n}\\n\\n/**\\n * @title The interface for all position related matters\\n * @notice These methods allow users to create, modify and terminate their positions\\n */\\ninterface IDCAHubPositionHandler {\\n  /// @notice The position of a certain user\\n  struct UserPosition {\\n    // The token that the user deposited and will be swapped in exchange for \\\"to\\\"\\n    IERC20Metadata from;\\n    // The token that the user will get in exchange for their \\\"from\\\" tokens in each swap\\n    IERC20Metadata to;\\n    // How frequently the position's swaps should be executed\\n    uint32 swapInterval;\\n    // How many swaps were executed since deposit, last modification, or last withdraw\\n    uint32 swapsExecuted;\\n    // How many \\\"to\\\" tokens can currently be withdrawn\\n    uint256 swapped;\\n    // How many swaps left the position has to execute\\n    uint32 swapsLeft;\\n    // How many \\\"from\\\" tokens there are left to swap\\n    uint256 remaining;\\n    // How many \\\"from\\\" tokens need to be traded in each swap\\n    uint120 rate;\\n  }\\n\\n  /// @notice A list of positions that all have the same `to` token\\n  struct PositionSet {\\n    // The `to` token\\n    address token;\\n    // The position ids\\n    uint256[] positionIds;\\n  }\\n\\n  /**\\n   * @notice Emitted when a position is terminated\\n   * @param user The address of the user that terminated the position\\n   * @param recipientUnswapped The address of the user that will receive the unswapped tokens\\n   * @param recipientSwapped The address of the user that will receive the swapped tokens\\n   * @param positionId The id of the position that was terminated\\n   * @param returnedUnswapped How many \\\"from\\\" tokens were returned to the caller\\n   * @param returnedSwapped How many \\\"to\\\" tokens were returned to the caller\\n   */\\n  event Terminated(\\n    address indexed user,\\n    address indexed recipientUnswapped,\\n    address indexed recipientSwapped,\\n    uint256 positionId,\\n    uint256 returnedUnswapped,\\n    uint256 returnedSwapped\\n  );\\n\\n  /**\\n   * @notice Emitted when a position is created\\n   * @param depositor The address of the user that creates the position\\n   * @param owner The address of the user that will own the position\\n   * @param positionId The id of the position that was created\\n   * @param fromToken The address of the \\\"from\\\" token\\n   * @param toToken The address of the \\\"to\\\" token\\n   * @param swapInterval How frequently the position's swaps should be executed\\n   * @param rate How many \\\"from\\\" tokens need to be traded in each swap\\n   * @param startingSwap The number of the swap when the position will be executed for the first time\\n   * @param lastSwap The number of the swap when the position will be executed for the last time\\n   * @param permissions The permissions defined for the position\\n   */\\n  event Deposited(\\n    address indexed depositor,\\n    address indexed owner,\\n    uint256 positionId,\\n    address fromToken,\\n    address toToken,\\n    uint32 swapInterval,\\n    uint120 rate,\\n    uint32 startingSwap,\\n    uint32 lastSwap,\\n    IDCAPermissionManager.PermissionSet[] permissions\\n  );\\n\\n  /**\\n   * @notice Emitted when a position is created and extra data is provided\\n   * @param positionId The id of the position that was created\\n   * @param data The extra data that was provided\\n   */\\n  event Miscellaneous(uint256 positionId, bytes data);\\n\\n  /**\\n   * @notice Emitted when a user withdraws all swapped tokens from a position\\n   * @param withdrawer The address of the user that executed the withdraw\\n   * @param recipient The address of the user that will receive the withdrawn tokens\\n   * @param positionId The id of the position that was affected\\n   * @param token The address of the withdrawn tokens. It's the same as the position's \\\"to\\\" token\\n   * @param amount The amount that was withdrawn\\n   */\\n  event Withdrew(address indexed withdrawer, address indexed recipient, uint256 positionId, address token, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when a user withdraws all swapped tokens from many positions\\n   * @param withdrawer The address of the user that executed the withdraws\\n   * @param recipient The address of the user that will receive the withdrawn tokens\\n   * @param positions The positions to withdraw from\\n   * @param withdrew The total amount that was withdrawn from each token\\n   */\\n  event WithdrewMany(address indexed withdrawer, address indexed recipient, PositionSet[] positions, uint256[] withdrew);\\n\\n  /**\\n   * @notice Emitted when a position is modified\\n   * @param user The address of the user that modified the position\\n   * @param positionId The id of the position that was modified\\n   * @param rate How many \\\"from\\\" tokens need to be traded in each swap\\n   * @param startingSwap The number of the swap when the position will be executed for the first time\\n   * @param lastSwap The number of the swap when the position will be executed for the last time\\n   */\\n  event Modified(address indexed user, uint256 positionId, uint120 rate, uint32 startingSwap, uint32 lastSwap);\\n\\n  /// @notice Thrown when a user tries to create a position with the same `from` & `to`\\n  error InvalidToken();\\n\\n  /// @notice Thrown when a user tries to create a position with a swap interval that is not allowed\\n  error IntervalNotAllowed();\\n\\n  /// @notice Thrown when a user tries operate on a position that doesn't exist (it might have been already terminated)\\n  error InvalidPosition();\\n\\n  /// @notice Thrown when a user tries operate on a position that they don't have access to\\n  error UnauthorizedCaller();\\n\\n  /// @notice Thrown when a user tries to create a position with zero swaps\\n  error ZeroSwaps();\\n\\n  /// @notice Thrown when a user tries to create a position with zero funds\\n  error ZeroAmount();\\n\\n  /// @notice Thrown when a user tries to withdraw a position whose `to` token doesn't match the specified one\\n  error PositionDoesNotMatchToken();\\n\\n  /// @notice Thrown when a user tries create or modify a position with an amount too big\\n  error AmountTooBig();\\n\\n  /**\\n   * @notice Returns the permission manager contract\\n   * @return The contract itself\\n   */\\n  function permissionManager() external view returns (IDCAPermissionManager);\\n\\n  /**\\n   * @notice Returns total created positions\\n   * @return The total created positions\\n   */\\n  function totalCreatedPositions() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns a user position\\n   * @param positionId The id of the position\\n   * @return position The position itself\\n   */\\n  function userPosition(uint256 positionId) external view returns (UserPosition memory position);\\n\\n  /**\\n   * @notice Creates a new position\\n   * @dev Will revert:\\n   *      - With ZeroAddress if from, to or owner are zero\\n   *      - With InvalidToken if from == to\\n   *      - With ZeroAmount if amount is zero\\n   *      - With AmountTooBig if amount is too big\\n   *      - With ZeroSwaps if amountOfSwaps is zero\\n   *      - With IntervalNotAllowed if swapInterval is not allowed\\n   * @param from The address of the \\\"from\\\" token\\n   * @param to The address of the \\\"to\\\" token\\n   * @param amount How many \\\"from\\\" tokens will be swapped in total\\n   * @param amountOfSwaps How many swaps to execute for this position\\n   * @param swapInterval How frequently the position's swaps should be executed\\n   * @param owner The address of the owner of the position being created\\n   * @param permissions Extra permissions to add to the position. Can be empty\\n   * @return positionId The id of the created position\\n   */\\n  function deposit(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint32 amountOfSwaps,\\n    uint32 swapInterval,\\n    address owner,\\n    IDCAPermissionManager.PermissionSet[] calldata permissions\\n  ) external returns (uint256 positionId);\\n\\n  /**\\n   * @notice Creates a new position\\n   * @dev Will revert:\\n   *      - With ZeroAddress if from, to or owner are zero\\n   *      - With InvalidToken if from == to\\n   *      - With ZeroAmount if amount is zero\\n   *      - With AmountTooBig if amount is too big\\n   *      - With ZeroSwaps if amountOfSwaps is zero\\n   *      - With IntervalNotAllowed if swapInterval is not allowed\\n   * @param from The address of the \\\"from\\\" token\\n   * @param to The address of the \\\"to\\\" token\\n   * @param amount How many \\\"from\\\" tokens will be swapped in total\\n   * @param amountOfSwaps How many swaps to execute for this position\\n   * @param swapInterval How frequently the position's swaps should be executed\\n   * @param owner The address of the owner of the position being created\\n   * @param permissions Extra permissions to add to the position. Can be empty\\n   * @param miscellaneous Bytes that will be emitted, and associated with the position\\n   * @return positionId The id of the created position\\n   */\\n  function deposit(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint32 amountOfSwaps,\\n    uint32 swapInterval,\\n    address owner,\\n    IDCAPermissionManager.PermissionSet[] calldata permissions,\\n    bytes calldata miscellaneous\\n  ) external returns (uint256 positionId);\\n\\n  /**\\n   * @notice Withdraws all swapped tokens from a position to a recipient\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With ZeroAddress if recipient is zero\\n   * @param positionId The position's id\\n   * @param recipient The address to withdraw swapped tokens to\\n   * @return swapped How much was withdrawn\\n   */\\n  function withdrawSwapped(uint256 positionId, address recipient) external returns (uint256 swapped);\\n\\n  /**\\n   * @notice Withdraws all swapped tokens from multiple positions\\n   * @dev Will revert:\\n   *      - With InvalidPosition if any of the position ids are invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position to any of the given positions\\n   *      - With ZeroAddress if recipient is zero\\n   *      - With PositionDoesNotMatchToken if any of the positions do not match the token in their position set\\n   * @param positions A list positions, grouped by `to` token\\n   * @param recipient The address to withdraw swapped tokens to\\n   * @return withdrawn How much was withdrawn for each token\\n   */\\n  function withdrawSwappedMany(PositionSet[] calldata positions, address recipient) external returns (uint256[] memory withdrawn);\\n\\n  /**\\n   * @notice Takes the unswapped balance, adds the new deposited funds and modifies the position so that\\n   * it is executed in newSwaps swaps\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With AmountTooBig if amount is too big\\n   * @param positionId The position's id\\n   * @param amount Amount of funds to add to the position\\n   * @param newSwaps The new amount of swaps\\n   */\\n  function increasePosition(\\n    uint256 positionId,\\n    uint256 amount,\\n    uint32 newSwaps\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws the specified amount from the unswapped balance and modifies the position so that\\n   * it is executed in newSwaps swaps\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With ZeroSwaps if newSwaps is zero and amount is not the total unswapped balance\\n   * @param positionId The position's id\\n   * @param amount Amount of funds to withdraw from the position\\n   * @param newSwaps The new amount of swaps\\n   * @param recipient The address to send tokens to\\n   */\\n  function reducePosition(\\n    uint256 positionId,\\n    uint256 amount,\\n    uint32 newSwaps,\\n    address recipient\\n  ) external;\\n\\n  /**\\n   * @notice Terminates the position and sends all unswapped and swapped balance to the specified recipients\\n   * @dev Will revert:\\n   *      - With InvalidPosition if positionId is invalid\\n   *      - With UnauthorizedCaller if the caller doesn't have access to the position\\n   *      - With ZeroAddress if recipientUnswapped or recipientSwapped is zero\\n   * @param positionId The position's id\\n   * @param recipientUnswapped The address to withdraw unswapped tokens to\\n   * @param recipientSwapped The address to withdraw swapped tokens to\\n   * @return unswapped The unswapped balance sent to `recipientUnswapped`\\n   * @return swapped The swapped balance sent to `recipientSwapped`\\n   */\\n  function terminate(\\n    uint256 positionId,\\n    address recipientUnswapped,\\n    address recipientSwapped\\n  ) external returns (uint256 unswapped, uint256 swapped);\\n}\\n\\n/**\\n * @title The interface for all swap related matters\\n * @notice These methods allow users to get information about the next swap, and how to execute it\\n */\\ninterface IDCAHubSwapHandler {\\n  /// @notice Information about a swap\\n  struct SwapInfo {\\n    // The tokens involved in the swap\\n    TokenInSwap[] tokens;\\n    // The pairs involved in the swap\\n    PairInSwap[] pairs;\\n  }\\n\\n  /// @notice Information about a token's role in a swap\\n  struct TokenInSwap {\\n    // The token's address\\n    address token;\\n    // How much will be given of this token as a reward\\n    uint256 reward;\\n    // How much of this token needs to be provided by swapper\\n    uint256 toProvide;\\n    // How much of this token will be paid to the platform\\n    uint256 platformFee;\\n  }\\n\\n  /// @notice Information about a pair in a swap\\n  struct PairInSwap {\\n    // The address of one of the tokens\\n    address tokenA;\\n    // The address of the other token\\n    address tokenB;\\n    // The total amount of token A swapped in this pair\\n    uint256 totalAmountToSwapTokenA;\\n    // The total amount of token B swapped in this pair\\n    uint256 totalAmountToSwapTokenB;\\n    // How much is 1 unit of token A when converted to B\\n    uint256 ratioAToB;\\n    // How much is 1 unit of token B when converted to A\\n    uint256 ratioBToA;\\n    // The swap intervals involved in the swap, represented as a byte\\n    bytes1 intervalsInSwap;\\n  }\\n\\n  /// @notice A pair of tokens, represented by their indexes in an array\\n  struct PairIndexes {\\n    // The index of the token A\\n    uint8 indexTokenA;\\n    // The index of the token B\\n    uint8 indexTokenB;\\n  }\\n\\n  /**\\n   * @notice Emitted when a swap is executed\\n   * @param sender The address of the user that initiated the swap\\n   * @param rewardRecipient The address that received the reward\\n   * @param callbackHandler The address that executed the callback\\n   * @param swapInformation All information related to the swap\\n   * @param borrowed How much was borrowed\\n   * @param fee The swap fee at the moment of the swap\\n   */\\n  event Swapped(\\n    address indexed sender,\\n    address indexed rewardRecipient,\\n    address indexed callbackHandler,\\n    SwapInfo swapInformation,\\n    uint256[] borrowed,\\n    uint32 fee\\n  );\\n\\n  /// @notice Thrown when pairs indexes are not sorted correctly\\n  error InvalidPairs();\\n\\n  /// @notice Thrown when trying to execute a swap, but there is nothing to swap\\n  error NoSwapsToExecute();\\n\\n  /**\\n   * @notice Returns all information related to the next swap\\n   * @dev Will revert with:\\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\\n   * @param tokens The tokens involved in the next swap\\n   * @param pairs The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\\n   * @param calculatePrivilegedAvailability Some accounts get privileged availability and can execute swaps before others. This flag provides\\n   *        the possibility to calculate the next swap information for privileged and non-privileged accounts\\n   * @param oracleData Bytes to send to the oracle when executing a quote\\n   * @return swapInformation The information about the next swap\\n   */\\n  function getNextSwapInfo(\\n    address[] calldata tokens,\\n    PairIndexes[] calldata pairs,\\n    bool calculatePrivilegedAvailability,\\n    bytes calldata oracleData\\n  ) external view returns (SwapInfo memory swapInformation);\\n\\n  /**\\n   * @notice Executes a flash swap\\n   * @dev Will revert with:\\n   *      - With InvalidTokens if tokens are not sorted, or if there are duplicates\\n   *      - With InvalidPairs if pairs are not sorted (first by indexTokenA and then indexTokenB), or if indexTokenA >= indexTokenB for any pair\\n   *      - With Paused if swaps are paused by protocol\\n   *      - With NoSwapsToExecute if there are no swaps to execute for the given pairs\\n   *      - With LiquidityNotReturned if the required tokens were not back during the callback\\n   * @param tokens The tokens involved in the next swap\\n   * @param pairsToSwap The pairs that you want to swap. Each element of the list points to the index of the token in the tokens array\\n   * @param rewardRecipient The address to send the reward to\\n   * @param callbackHandler Address to call for callback (and send the borrowed tokens to)\\n   * @param borrow How much to borrow of each of the tokens in tokens. The amount must match the position of the token in the tokens array\\n   * @param callbackData Bytes to send to the caller during the callback\\n   * @param oracleData Bytes to send to the oracle when executing a quote\\n   * @return Information about the executed swap\\n   */\\n  function swap(\\n    address[] calldata tokens,\\n    PairIndexes[] calldata pairsToSwap,\\n    address rewardRecipient,\\n    address callbackHandler,\\n    uint256[] calldata borrow,\\n    bytes calldata callbackData,\\n    bytes calldata oracleData\\n  ) external returns (SwapInfo memory);\\n}\\n\\n/**\\n * @title The interface for handling all configuration\\n * @notice This contract will manage configuration that affects all pairs, swappers, etc\\n */\\ninterface IDCAHubConfigHandler {\\n  /**\\n   * @notice Emitted when a new oracle is set\\n   * @param oracle The new oracle contract\\n   */\\n  event OracleSet(ITokenPriceOracle oracle);\\n\\n  /**\\n   * @notice Emitted when a new swap fee is set\\n   * @param feeSet The new swap fee\\n   */\\n  event SwapFeeSet(uint32 feeSet);\\n\\n  /**\\n   * @notice Emitted when new swap intervals are allowed\\n   * @param swapIntervals The new swap intervals\\n   */\\n  event SwapIntervalsAllowed(uint32[] swapIntervals);\\n\\n  /**\\n   * @notice Emitted when some swap intervals are no longer allowed\\n   * @param swapIntervals The swap intervals that are no longer allowed\\n   */\\n  event SwapIntervalsForbidden(uint32[] swapIntervals);\\n\\n  /**\\n   * @notice Emitted when a new platform fee ratio is set\\n   * @param platformFeeRatio The new platform fee ratio\\n   */\\n  event PlatformFeeRatioSet(uint16 platformFeeRatio);\\n\\n  /**\\n   * @notice Emitted when allowed states of tokens are updated\\n   * @param tokens Array of updated tokens\\n   * @param allowed Array of new allow state per token were allowed[i] is the updated state of tokens[i]\\n   */\\n  event TokensAllowedUpdated(address[] tokens, bool[] allowed);\\n\\n  /// @notice Thrown when trying to interact with an unallowed token\\n  error UnallowedToken();\\n\\n  /// @notice Thrown when set allowed tokens input is not valid\\n  error InvalidAllowedTokensInput();\\n\\n  /// @notice Thrown when trying to set a fee higher than the maximum allowed\\n  error HighFee();\\n\\n  /// @notice Thrown when trying to set a fee that is not multiple of 100\\n  error InvalidFee();\\n\\n  /// @notice Thrown when trying to set a fee ratio that is higher that the maximum allowed\\n  error HighPlatformFeeRatio();\\n\\n  /**\\n   * @notice Returns the max fee ratio that can be set\\n   * @dev Cannot be modified\\n   * @return The maximum possible value\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_PLATFORM_FEE_RATIO() external view returns (uint16);\\n\\n  /**\\n   * @notice Returns the fee charged on swaps\\n   * @return swapFee The fee itself\\n   */\\n  function swapFee() external view returns (uint32 swapFee);\\n\\n  /**\\n   * @notice Returns the price oracle contract\\n   * @return oracle The contract itself\\n   */\\n  function oracle() external view returns (ITokenPriceOracle oracle);\\n\\n  /**\\n   * @notice Returns how much will the platform take from the fees collected in swaps\\n   * @return The current ratio\\n   */\\n  function platformFeeRatio() external view returns (uint16);\\n\\n  /**\\n   * @notice Returns the max fee that can be set for swaps\\n   * @dev Cannot be modified\\n   * @return maxFee The maximum possible fee\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MAX_FEE() external view returns (uint32 maxFee);\\n\\n  /**\\n   * @notice Returns a byte that represents allowed swap intervals\\n   * @return allowedSwapIntervals The allowed swap intervals\\n   */\\n  function allowedSwapIntervals() external view returns (bytes1 allowedSwapIntervals);\\n\\n  /**\\n   * @notice Returns if a token is currently allowed or not\\n   * @return Allowed state of token\\n   */\\n  function allowedTokens(address token) external view returns (bool);\\n\\n  /**\\n   * @notice Returns token's magnitude (10**decimals)\\n   * @return Stored magnitude for token\\n   */\\n  function tokenMagnitude(address token) external view returns (uint120);\\n\\n  /**\\n   * @notice Returns whether swaps and deposits are currently paused\\n   * @return isPaused Whether swaps and deposits are currently paused\\n   */\\n  function paused() external view returns (bool isPaused);\\n\\n  /**\\n   * @notice Sets a new swap fee\\n   * @dev Will revert with HighFee if the fee is higher than the maximum\\n   * @dev Will revert with InvalidFee if the fee is not multiple of 100\\n   * @param fee The new swap fee\\n   */\\n  function setSwapFee(uint32 fee) external;\\n\\n  /**\\n   * @notice Sets a new price oracle\\n   * @dev Will revert with ZeroAddress if the zero address is passed\\n   * @param oracle The new oracle contract\\n   */\\n  function setOracle(ITokenPriceOracle oracle) external;\\n\\n  /**\\n   * @notice Sets a new platform fee ratio\\n   * @dev Will revert with HighPlatformFeeRatio if given ratio is too high\\n   * @param platformFeeRatio The new ratio\\n   */\\n  function setPlatformFeeRatio(uint16 platformFeeRatio) external;\\n\\n  /**\\n   * @notice Adds new swap intervals to the allowed list\\n   * @param swapIntervals The new swap intervals\\n   */\\n  function addSwapIntervalsToAllowedList(uint32[] calldata swapIntervals) external;\\n\\n  /**\\n   * @notice Removes some swap intervals from the allowed list\\n   * @param swapIntervals The swap intervals to remove\\n   */\\n  function removeSwapIntervalsFromAllowedList(uint32[] calldata swapIntervals) external;\\n\\n  /// @notice Pauses all swaps and deposits\\n  function pause() external;\\n\\n  /// @notice Unpauses all swaps and deposits\\n  function unpause() external;\\n}\\n\\n/**\\n * @title The interface for handling platform related actions\\n * @notice This contract will handle all actions that affect the platform in some way\\n */\\ninterface IDCAHubPlatformHandler {\\n  /**\\n   * @notice Emitted when someone withdraws from the paltform balance\\n   * @param sender The address of the user that initiated the withdraw\\n   * @param recipient The address that received the withdraw\\n   * @param amounts The tokens (and the amount) that were withdrawn\\n   */\\n  event WithdrewFromPlatform(address indexed sender, address indexed recipient, IDCAHub.AmountOfToken[] amounts);\\n\\n  /**\\n   * @notice Withdraws tokens from the platform balance\\n   * @param amounts The amounts to withdraw\\n   * @param recipient The address that will receive the tokens\\n   */\\n  function withdrawFromPlatformBalance(IDCAHub.AmountOfToken[] calldata amounts, address recipient) external;\\n}\\n\\ninterface IDCAHub is IDCAHubParameters, IDCAHubConfigHandler, IDCAHubSwapHandler, IDCAHubPositionHandler, IDCAHubPlatformHandler {\\n  /// @notice Specifies an amount of a token. For example to determine how much to borrow from certain tokens\\n  struct AmountOfToken {\\n    // The tokens' address\\n    address token;\\n    // How much to borrow or withdraw of the specified token\\n    uint256 amount;\\n  }\\n\\n  /// @notice Thrown when one of the parameters is a zero address\\n  error ZeroAddress();\\n\\n  /// @notice Thrown when the expected liquidity is not returned in flash swaps\\n  error LiquidityNotReturned();\\n\\n  /// @notice Thrown when a list of token pairs is not sorted, or if there are duplicates\\n  error InvalidTokens();\\n}\\n\",\"keccak256\":\"0x4863e91434fa2bca89e8ff16bc35743103a89a39cfc8f9bb963d62fc430f3966\",\"license\":\"GPL-2.0-or-later\"},\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAPermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol';\\n\\ninterface IERC721BasicEnumerable {\\n  /**\\n   * @notice Count NFTs tracked by this contract\\n   * @return A count of valid NFTs tracked by this contract, where each one of\\n   *         them has an assigned and queryable owner not equal to the zero address\\n   */\\n  function totalSupply() external view returns (uint256);\\n}\\n\\n/**\\n * @title The interface for all permission related matters\\n * @notice These methods allow users to set and remove permissions to their positions\\n */\\ninterface IDCAPermissionManager is IERC721, IERC721BasicEnumerable {\\n  /// @notice Set of possible permissions\\n  enum Permission {\\n    INCREASE,\\n    REDUCE,\\n    WITHDRAW,\\n    TERMINATE\\n  }\\n\\n  /// @notice A set of permissions for a specific operator\\n  struct PermissionSet {\\n    // The address of the operator\\n    address operator;\\n    // The permissions given to the overator\\n    Permission[] permissions;\\n  }\\n\\n  /// @notice A collection of permissions sets for a specific position\\n  struct PositionPermissions {\\n    // The id of the token\\n    uint256 tokenId;\\n    // The permissions to assign to the position\\n    PermissionSet[] permissionSets;\\n  }\\n\\n  /**\\n   * @notice Emitted when permissions for a token are modified\\n   * @param tokenId The id of the token\\n   * @param permissions The set of permissions that were updated\\n   */\\n  event Modified(uint256 tokenId, PermissionSet[] permissions);\\n\\n  /**\\n   * @notice Emitted when the address for a new descritor is set\\n   * @param descriptor The new descriptor contract\\n   */\\n  event NFTDescriptorSet(IDCAHubPositionDescriptor descriptor);\\n\\n  /// @notice Thrown when a user tries to set the hub, once it was already set\\n  error HubAlreadySet();\\n\\n  /// @notice Thrown when a user provides a zero address when they shouldn't\\n  error ZeroAddress();\\n\\n  /// @notice Thrown when a user calls a method that can only be executed by the hub\\n  error OnlyHubCanExecute();\\n\\n  /// @notice Thrown when a user tries to modify permissions for a token they do not own\\n  error NotOwner();\\n\\n  /// @notice Thrown when a user tries to execute a permit with an expired deadline\\n  error ExpiredDeadline();\\n\\n  /// @notice Thrown when a user tries to execute a permit with an invalid signature\\n  error InvalidSignature();\\n\\n  /**\\n   * @notice The permit typehash used in the permit signature\\n   * @return The typehash for the permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the permission permit signature\\n   * @return The typehash for the permission permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the multi permission permit signature\\n   * @return The typehash for the multi permission permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function MULTI_PERMISSION_PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the permission permit signature\\n   * @return The typehash for the permission set\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function PERMISSION_SET_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The permit typehash used in the multi permission permit signature\\n   * @return The typehash for the position permissions\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function POSITION_PERMISSIONS_TYPEHASH() external pure returns (bytes32);\\n\\n  /**\\n   * @notice The domain separator used in the permit signature\\n   * @return The domain seperator used in encoding of permit signature\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the NFT descriptor contract\\n   * @return The contract for the NFT descriptor\\n   */\\n  function nftDescriptor() external returns (IDCAHubPositionDescriptor);\\n\\n  /**\\n   * @notice Returns the address of the DCA Hub\\n   * @return The address of the DCA Hub\\n   */\\n  function hub() external returns (address);\\n\\n  /**\\n   * @notice Returns the next nonce to use for a given user\\n   * @param user The address of the user\\n   * @return nonce The next nonce to use\\n   */\\n  function nonces(address user) external returns (uint256 nonce);\\n\\n  /**\\n   * @notice Returns whether the given address has the permission for the given token\\n   * @param id The id of the token to check\\n   * @param account The address of the user to check\\n   * @param permission The permission to check\\n   * @return Whether the user has the permission or not\\n   */\\n  function hasPermission(\\n    uint256 id,\\n    address account,\\n    Permission permission\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice Returns whether the given address has the permissions for the given token\\n   * @param id The id of the token to check\\n   * @param account The address of the user to check\\n   * @param permissions The permissions to check\\n   * @return hasPermissions Whether the user has each permission or not\\n   */\\n  function hasPermissions(\\n    uint256 id,\\n    address account,\\n    Permission[] calldata permissions\\n  ) external view returns (bool[] memory hasPermissions);\\n\\n  /**\\n   * @notice Sets the address for the hub\\n   * @dev Can only be successfully executed once. Once it's set, it can be modified again\\n   *      Will revert:\\n   *      - With ZeroAddress if address is zero\\n   *      - With HubAlreadySet if the hub has already been set\\n   * @param hub The address to set for the hub\\n   */\\n  function setHub(address hub) external;\\n\\n  /**\\n   * @notice Mints a new NFT with the given id, and sets the permissions for it\\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\\n   * @param id The id of the new NFT\\n   * @param owner The owner of the new NFT\\n   * @param permissions Permissions to set for the new NFT\\n   */\\n  function mint(\\n    uint256 id,\\n    address owner,\\n    PermissionSet[] calldata permissions\\n  ) external;\\n\\n  /**\\n   * @notice Burns the NFT with the given id, and clears all permissions\\n   * @dev Will revert with OnlyHubCanExecute if the caller is not the hub\\n   * @param id The token's id\\n   */\\n  function burn(uint256 id) external;\\n\\n  /**\\n   * @notice Sets new permissions for the given position\\n   * @dev Will revert with NotOwner if the caller is not the token's owner.\\n   *      Operators that are not part of the given permission sets do not see their permissions modified.\\n   *      In order to remove permissions to an operator, provide an empty list of permissions for them\\n   * @param id The token's id\\n   * @param permissions A list of permission sets\\n   */\\n  function modify(uint256 id, PermissionSet[] calldata permissions) external;\\n\\n  /**\\n   * @notice Sets new permissions for the given positions\\n   * @dev This is basically the same as executing multiple `modify`\\n   * @param permissions A list of position permissions to set\\n   */\\n  function modifyMany(PositionPermissions[] calldata permissions) external;\\n\\n  /**\\n   * @notice Approves spending of a specific token ID by spender via signature\\n   * @param spender The account that is being approved\\n   * @param tokenId The ID of the token that is being approved for spending\\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n   */\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Sets permissions via signature\\n   * @dev This method works similarly to `modifyMany`, but instead of being executed by the owner, it can be set by signature\\n   * @param permissions The permissions to set for the different positions\\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n   */\\n  function multiPermissionPermit(\\n    PositionPermissions[] calldata permissions,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Sets permissions via signature\\n   * @dev This method works similarly to `modify`, but instead of being executed by the owner, it can be set my signature\\n   * @param permissions The permissions to set\\n   * @param tokenId The token's id\\n   * @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n   * @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n   * @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n   * @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n   */\\n  function permissionPermit(\\n    PermissionSet[] calldata permissions,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Sets a new NFT descriptor\\n   * @dev Will revert with ZeroAddress if address is zero\\n   * @param descriptor The new NFT descriptor contract\\n   */\\n  function setNFTDescriptor(IDCAHubPositionDescriptor descriptor) external;\\n}\\n\",\"keccak256\":\"0x90b20be7552797f8967baa8228b3dfff60e129fa0ec4cf32e136ad0ffeb79f16\",\"license\":\"GPL-2.0-or-later\"},\"@mean-finance/nft-descriptors/solidity/interfaces/IDCAHubPositionDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.7 <0.9.0;\\n\\n/**\\n * @title The interface for generating a description for a position in a DCA Hub\\n * @notice Contracts that implement this interface must return a base64 JSON with the entire description\\n */\\ninterface IDCAHubPositionDescriptor {\\n  /**\\n   * @notice Generates a positions's description, both the JSON and the image inside\\n   * @param hub The address of the DCA Hub\\n   * @param positionId The token/position id\\n   * @return description The position's description\\n   */\\n  function tokenURI(address hub, uint256 positionId) external view returns (string memory description);\\n}\\n\",\"keccak256\":\"0x2f5b3f67cf9f0f23be3eb0a8c8edd953ded1dcd8bf074a27e8d2869e200b0a73\",\"license\":\"GPL-2.0-or-later\"},\"@mean-finance/oracles/solidity/interfaces/ITokenPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for an oracle that provides price quotes\\n * @notice These methods allow users to add support for pairs, and then ask for quotes\\n */\\ninterface ITokenPriceOracle {\\n  /// @notice Thrown when trying to add support for a pair that cannot be supported\\n  error PairCannotBeSupported(address tokenA, address tokenB);\\n\\n  /// @notice Thrown when trying to execute a quote with a pair that isn't supported yet\\n  error PairNotSupportedYet(address tokenA, address tokenB);\\n\\n  /**\\n   * @notice Returns whether this oracle can support the given pair of tokens\\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @return Whether the given pair of tokens can be supported by the oracle\\n   */\\n  function canSupportPair(address tokenA, address tokenB) external view returns (bool);\\n\\n  /**\\n   * @notice Returns whether this oracle is already supporting the given pair of tokens\\n   * @dev tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @return Whether the given pair of tokens is already being supported by the oracle\\n   */\\n  function isPairAlreadySupported(address tokenA, address tokenB) external view returns (bool);\\n\\n  /**\\n   * @notice Returns a quote, based on the given tokens and amount\\n   * @dev Will revert if pair isn't supported\\n   * @param tokenIn The token that will be provided\\n   * @param amountIn The amount that will be provided\\n   * @param tokenOut The token we would like to quote\\n   * @param data Custom data that the oracle might need to operate\\n   * @return amountOut How much `tokenOut` will be returned in exchange for `amountIn` amount of `tokenIn`\\n   */\\n  function quote(\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    bytes calldata data\\n  ) external view returns (uint256 amountOut);\\n\\n  /**\\n   * @notice Add or reconfigures the support for a given pair. This function will let the oracle take some actions\\n   *         to configure the pair, in preparation for future quotes. Can be called many times in order to let the oracle\\n   *         re-configure for a new context\\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @param data Custom data that the oracle might need to operate\\n   */\\n  function addOrModifySupportForPair(\\n    address tokenA,\\n    address tokenB,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Adds support for a given pair if the oracle didn't support it already. If called for a pair that is already supported,\\n   *         then nothing will happen. This function will let the oracle take some actions to configure the pair, in preparation\\n   *         for future quotes\\n   * @dev Will revert if pair cannot be supported. tokenA and tokenB may be passed in either tokenA/tokenB or tokenB/tokenA order\\n   * @param tokenA One of the pair's tokens\\n   * @param tokenB The other of the pair's tokens\\n   * @param data Custom data that the oracle might need to operate\\n   */\\n  function addSupportForPairIfNeeded(\\n    address tokenA,\\n    address tokenB,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xaa43e406144c5108a7f1ac330c434121f4acb7b50b6530dba4e205d2db520a0d\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/destination/xreceivers/ForwarderXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {IConnext} from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport {IXReceiver} from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ForwarderXReceiver\\n * @author Connext\\n * @notice Abstract contract to allow for forwarding a call. Handles security and error handling.\\n * @dev This is meant to be used in unauthenticated flows, so the data passed in is not guaranteed to be correct.\\n * This is meant to be used when there are funds passed into the contract that need to be forwarded to another contract.\\n */\\nabstract contract ForwarderXReceiver is IXReceiver {\\n  // The Connext contract on this domain\\n  IConnext public immutable connext;\\n\\n  /// EVENTS\\n  event ForwardedFunctionCallFailed(bytes32 _transferId);\\n  event ForwardedFunctionCallFailed(bytes32 _transferId, string _errorMessage);\\n  event ForwardedFunctionCallFailed(bytes32 _transferId, uint _errorCode);\\n  event ForwardedFunctionCallFailed(bytes32 _transferId, bytes _lowLevelData);\\n  event Prepared(bytes32 _transferId, bytes _data, uint256 _amount, address _asset);\\n\\n  /// ERRORS\\n  error ForwarderXReceiver__onlyConnext(address sender);\\n  error ForwarderXReceiver__prepareAndForward_notThis(address sender);\\n\\n  /// MODIFIERS\\n  /** @notice A modifier to ensure that only the Connext contract on this domain can be the caller.\\n   * If this is not enforced, then funds on this contract may potentially be claimed by any EOA.\\n   */\\n  modifier onlyConnext() {\\n    if (msg.sender != address(connext)) {\\n      revert ForwarderXReceiver__onlyConnext(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @param _connext - The address of the Connext contract on this domain\\n   */\\n  constructor(address _connext) {\\n    connext = IConnext(_connext);\\n  }\\n\\n  /**\\n   * @notice Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer.\\n   * @dev _originSender and _origin are not used in this implementation because this is meant for an \\\"unauthenticated\\\" call. This means\\n   * any router can call this function and no guarantees are made on the data passed in. This should only be used when there are\\n   * funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no\\n   * reason to call this function maliciously, because the router would be spending their own funds.\\n   * @param _transferId - The transfer ID of the transfer that triggered this call.\\n   * @param _amount - The amount of funds received in this transfer.\\n   * @param _asset - The asset of the funds received in this transfer.\\n   * @param _callData - The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.\\n   */\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount, // Final amount received via Connext (after AMM swaps, if applicable)\\n    address _asset,\\n    address /*_originSender*/,\\n    uint32 /*_origin*/,\\n    bytes calldata _callData\\n  ) external onlyConnext returns (bytes memory) {\\n    // Decode calldata\\n    (address _fallbackAddress, bytes memory _data) = abi.decode(_callData, (address, bytes));\\n\\n    bool successfulForward;\\n    try this.prepareAndForward(_transferId, _data, _amount, _asset) returns (bool success) {\\n      successfulForward = success;\\n      if (!success) {\\n        emit ForwardedFunctionCallFailed(_transferId);\\n      }\\n      // transfer to fallback address if forwardFunctionCall fails\\n    } catch Error(string memory _errorMessage) {\\n      // This is executed in case\\n      // revert was called with a reason string\\n      successfulForward = false;\\n      emit ForwardedFunctionCallFailed(_transferId, _errorMessage);\\n    } catch Panic(uint _errorCode) {\\n      // This is executed in case of a panic,\\n      // i.e. a serious error like division by zero\\n      // or overflow. The error code can be used\\n      // to determine the kind of error.\\n      successfulForward = false;\\n      emit ForwardedFunctionCallFailed(_transferId, _errorCode);\\n    } catch (bytes memory _lowLevelData) {\\n      // This is executed in case revert() was used.\\n      successfulForward = false;\\n      emit ForwardedFunctionCallFailed(_transferId, _lowLevelData);\\n    }\\n    if (!successfulForward) {\\n      IERC20(_asset).transfer(_fallbackAddress, _amount);\\n    }\\n    // Return the success status of the forwardFunctionCall\\n    return abi.encode(successfulForward);\\n  }\\n\\n  /// INTERNAL\\n  /**\\n   * @notice Prepares the data for the function call and forwards it. This can execute\\n   * any arbitrary function call in a two step process. For example, _prepare can be used to swap funds\\n   * on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds.\\n   * @dev This function is intended to be called by the xReceive function, and should not be called outside\\n   * of that context. The function is `public` so that it can be used with try-catch.\\n   *\\n   * @param _transferId - The transfer ID of the transfer that triggered this call\\n   * @param _data - The data to be prepared\\n   * @param _amount - The amount of funds received in this transfer\\n   * @param _asset - The asset of the funds received in this transfer\\n   */\\n  function prepareAndForward(\\n    bytes32 _transferId,\\n    bytes memory _data,\\n    uint256 _amount,\\n    address _asset\\n  ) public returns (bool) {\\n    if (msg.sender != address(this)) {\\n      revert ForwarderXReceiver__prepareAndForward_notThis(msg.sender);\\n    }\\n    // Prepare for forwarding\\n    bytes memory _prepared = _prepare(_transferId, _data, _amount, _asset);\\n    emit Prepared(_transferId, _data, _amount, _asset);\\n\\n    // Forward the function call\\n    return _forwardFunctionCall(_prepared, _transferId, _amount, _asset);\\n  }\\n\\n  /// INTERNAL VIRTUAL\\n  /**\\n   * @notice Prepares the data for the function call. This can execute any arbitrary function call in a two step process.\\n   * For example, _prepare can be used to swap funds on a DEX, or do any other type of preparation, and pass on the\\n   * prepared data to _forwardFunctionCall.\\n   * @dev This function needs to be overriden in implementations of this contract. If no preparation is needed, this\\n   * function can be overriden to return the data as is.\\n   *\\n   * @param _transferId - The transfer ID of the transfer that triggered this call\\n   * @param _data - The data to be prepared\\n   * @param _amount - The amount of funds received in this transfer\\n   * @param _asset - The asset of the funds received in this transfer\\n   */\\n  function _prepare(\\n    bytes32 _transferId,\\n    bytes memory _data,\\n    uint256 _amount,\\n    address _asset\\n  ) internal virtual returns (bytes memory) {\\n    return abi.encode(_data, _transferId, _amount, _asset);\\n  }\\n\\n  /**\\n   * @notice Forwards the function call. This can execute any arbitrary function call in a two step process.\\n   * The first step is to prepare the data, and the second step is to forward the function call to a\\n   * given contract.\\n   * @dev This function needs to be overriden in implementations of this contract.\\n   *\\n   * @param _preparedData - The data to be forwarded, after processing in _prepare\\n   * @param _transferId - The transfer ID of the transfer that triggered this call\\n   * @param _amount - The amount of funds received in this transfer\\n   * @param _asset - The asset of the funds received in this transfer\\n   */\\n  function _forwardFunctionCall(\\n    bytes memory _preparedData,\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset\\n  ) internal virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0xc6f416d3670007b5c2ce5e066f92a62a24a9ccda207d87f0e1d12acc73977df0\",\"license\":\"UNLICENSED\"},\"contracts/destination/xreceivers/Swap/SwapForwarderXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ForwarderXReceiver} from \\\"../ForwarderXReceiver.sol\\\";\\nimport {SwapAdapter} from \\\"../../../shared/Swap/SwapAdapter.sol\\\";\\n\\n/**\\n * @title SwapForwarderXReceiver\\n * @author Connext\\n * @notice Abstract contract to allow for swapping tokens before forwarding a call.\\n */\\nabstract contract SwapForwarderXReceiver is ForwarderXReceiver, SwapAdapter {\\n  using Address for address;\\n\\n  /// @dev The address of the Connext contract on this domain.\\n  constructor(address _connext) ForwarderXReceiver(_connext) {}\\n\\n  /// INTERNAL\\n  /**\\n   * @notice Prepare the data by calling to the swap adapter. Return the data to be swapped.\\n   * @dev This is called by the xReceive function so the input data is provided by the Connext bridge.\\n   * @param _transferId The transferId of the transfer.\\n   * @param _data The data to be swapped.\\n   * @param _amount The amount to be swapped.\\n   * @param _asset The incoming asset to be swapped.\\n   */\\n  function _prepare(\\n    bytes32 _transferId,\\n    bytes memory _data,\\n    uint256 _amount,\\n    address _asset\\n  ) internal override returns (bytes memory) {\\n    (address _swapper, address _toAsset, bytes memory _swapData, bytes memory _forwardCallData) = abi.decode(\\n      _data,\\n      (address, address, bytes, bytes)\\n    );\\n\\n    uint256 _amountOut = this.exactSwap(_swapper, _amount, _asset, _toAsset, _swapData);\\n\\n    return abi.encode(_forwardCallData, _amountOut, _asset, _toAsset, _transferId);\\n  }\\n}\\n\",\"keccak256\":\"0x245f785de31c08f83e7d3ffd54cf96c0ecf0e62beea902f69664c8bc5de0e149\",\"license\":\"UNLICENSED\"},\"contracts/integration/MeanFinance/MeanFinanceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IDCAHub, IDCAPermissionManager} from \\\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol\\\";\\n\\ncontract MeanFinanceAdapter {\\n  /// @notice MeanFinance IDCAHub contract for deposit\\n  /// @dev see https://docs.mean.finance/guides/smart-contract-registry\\n  // IDCAHub public hub = IDCAHub(0xA5AdC5484f9997fBF7D405b9AA62A7d88883C345);\\n  IDCAHub public immutable hub;\\n\\n  constructor(address _hub) {\\n    hub = IDCAHub(_hub);\\n  }\\n\\n  /// @notice Creates a new position\\n  /// @param _from The address of the \\\"from\\\" token\\n  /// @param _to The address of the \\\"to\\\" token\\n  /// @param _amount How many \\\"from\\\" tokens will be swapped in total\\n  /// @param _amountOfSwaps How many swaps to execute for this position\\n  /// @param _swapInterval How frequently the position's swaps should be executed\\n  /// @param _owner The address of the owner of the position being created\\n  /// @return _positionId The id of the created position\\n  function deposit(\\n    address _from,\\n    address _to,\\n    uint256 _amount,\\n    uint32 _amountOfSwaps,\\n    uint32 _swapInterval,\\n    address _owner,\\n    IDCAPermissionManager.PermissionSet[] memory _permissions\\n  ) internal returns (uint256 _positionId) {\\n    // We need to increase the allowance for the hub before calling deposit\\n    IERC20(_from).approve(address(hub), _amount);\\n    _positionId = hub.deposit(_from, _to, _amount, _amountOfSwaps, _swapInterval, _owner, _permissions);\\n    return _positionId;\\n  }\\n}\\n\",\"keccak256\":\"0x3c8c258ea9669c1d184dfeb5803c5ad98a31e8d9750494c13d0095160fb02a38\",\"license\":\"UNLICENSED\"},\"contracts/integration/MeanFinance/MeanFinanceTarget.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IConnext} from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport {IXReceiver} from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IDCAHubPositionHandler, IDCAPermissionManager} from \\\"@mean-finance/dca-v2-core/contracts/interfaces/IDCAHub.sol\\\";\\n\\nimport {MeanFinanceAdapter} from \\\"./MeanFinanceAdapter.sol\\\";\\nimport {SwapForwarderXReceiver} from \\\"../../destination/xreceivers/Swap/SwapForwarderXReceiver.sol\\\";\\n\\ncontract MeanFinanceTarget is SwapForwarderXReceiver, MeanFinanceAdapter {\\n  event Deposited(uint256 positionID);\\n  constructor(address _connext, address _hub) SwapForwarderXReceiver(_connext) MeanFinanceAdapter(_hub)  {}\\n  function _forwardFunctionCall(\\n    bytes memory _preparedData,\\n    bytes32 /*_transferId*/,\\n    uint256 /*_amount*/,\\n    address /*_asset*/\\n  ) internal override returns (bool) {\\n    (bytes memory _forwardCallData, uint256 _amountOut, , ) = abi.decode(\\n      _preparedData,\\n      (bytes, uint256, address, address)\\n    );\\n    (\\n      address _from,\\n      address _to,\\n      uint32 _amountOfSwaps,\\n      uint32 _swapInterval,\\n      address _owner,\\n      IDCAPermissionManager.PermissionSet[] memory _permissions\\n    ) = abi.decode(\\n        _forwardCallData,\\n        (address, address, uint32, uint32, address, IDCAPermissionManager.PermissionSet[])\\n      );\\n    uint256 positionID = deposit(_from, _to, _amountOut, _amountOfSwaps, _swapInterval, _owner, _permissions);\\n    emit Deposited(positionID);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x4ae6518c6c1176e0d970564709858c9213bd075c6b3b9283dbe76b3fd7714f74\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/SwapAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {ISwapper} from \\\"./interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title SwapAdapter\\n * @author Connext\\n * @notice This contract is used to provide a generic interface to swap tokens through\\n * a variety of different swap routers. It is used to swap tokens\\n * before proceeding with other actions. Swap router implementations can be added by owner.\\n * This is designed to be owned by the Connext DAO and swappers can be added by the DAO.\\n */\\ncontract SwapAdapter is Ownable2Step {\\n  using Address for address;\\n  using Address for address payable;\\n\\n  mapping(address => bool) public allowedSwappers;\\n\\n  address public immutable uniswapSwapRouter = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n  constructor() {\\n    allowedSwappers[address(this)] = true;\\n    allowedSwappers[uniswapSwapRouter] = true;\\n  }\\n\\n  /// Payable\\n  // @dev On the origin side, we can accept native assets for a swap.\\n  receive() external payable virtual {}\\n\\n  /// ADMIN\\n  /**\\n   * @notice Add a swapper to the list of allowed swappers.\\n   * @param _swapper Address of the swapper to add.\\n   */\\n  function addSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = true;\\n  }\\n\\n  /**\\n   * @notice Remove a swapper from the list of allowed swappers.\\n   * @param _swapper Address of the swapper to remove.\\n   */\\n  function removeSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = false;\\n  }\\n\\n  /// EXTERNAL\\n  /**\\n   * @notice Swap an exact amount of tokens for another token.\\n   * @param _swapper Address of the swapper to use.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the swapper. This data is encoded for a particular swap router, usually given\\n   * by an API. The swapper will decode the data and re-encode it with the new amountIn.\\n   */\\n  function exactSwap(\\n    address _swapper,\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData // comes directly from API with swap data encoded\\n  ) external payable returns (uint256 amountOut) {\\n    require(allowedSwappers[_swapper], \\\"!allowedSwapper\\\");\\n\\n    // If from == to, no need to swap\\n    if (_fromAsset == _toAsset) {\\n      return _amountIn;\\n    }\\n\\n    if (_fromAsset == address(0)) {\\n      amountOut = ISwapper(_swapper).swapETH(_amountIn, _toAsset, _swapData);\\n    } else {\\n      if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\\n        TransferHelper.safeApprove(_fromAsset, _swapper, type(uint256).max);\\n      }\\n      amountOut = ISwapper(_swapper).swap(_amountIn, _fromAsset, _toAsset, _swapData);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow\\n   * easy swaps on the source side where the amount does not need to be changed.\\n   * @param _swapper Address of the swapper to use.\\n   * @param swapData Data to pass to the swapper. This data is encoded for a particular swap router.\\n   */\\n  function directSwapperCall(address _swapper, bytes calldata swapData) external payable returns (uint256 amountOut) {\\n    bytes memory ret = _swapper.functionCallWithValue(swapData, msg.value, \\\"!directSwapperCallFailed\\\");\\n    amountOut = abi.decode(ret, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x278cd630093a943227629d253cefb474dc360628116453d9494825d81087c981\",\"license\":\"MIT\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function swap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external returns (uint256 amountOut);\\n\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x444fec1912aaa57621d4bd37f2a77489796668ae8e6e5bff6100d28ea02ae773\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60e03461012c57601f61181338819003918201601f19168301916001600160401b0383118484101761013157808492604094855283398101031261012c57610052602061004b83610147565b9201610147565b6001600160a01b03918216608052600180546001600160a01b03199081169091556000805491821633908117825560405194939284167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a36001604073e592427a0aece92de3edee1f18e0157c05861564928360a05230815260026020528181209360ff19948486825416179055815220918254161790551660c0526116b7908161015c82396080518181816101350152610565015260a05181610f7c015260c05181818161086c0152818161093b0152610fbe0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361012c5756fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163365a86fc14610fab5750806336f7d9f814610f665780633f2d413114610f24578063715018a614610ebf57806379ba509714610df75780638da5cb5b14610dce5780638ff1ed9714610d8f5780639938500614610d4a578063a0d7010214610c43578063a8cf939a14610594578063de4b05481461054f578063defc2248146104ef578063e30c3978146104c6578063f2fde38b146104565763fd614f41146100cf573861000f565b346104395760c0366003190112610439576024356004356100ee611019565b916100f7611003565b5060843563ffffffff811603610439576001600160401b0360a4358181116104395761012790369060040161102f565b90946001600160a01b0393917f00000000000000000000000000000000000000000000000000000000000000008516330361043e5786019460408787031261043957863596858816809803610439576020968782013595861161043957879561019092016110ea565b908285856000946101b66040519485938493635467c9cd60e11b855288600486016111c0565b03816000305af16000918161041a575b506103d957506001600060033d116103c7575b806308c379a01461036557634e487b7114610300575b6102ae575b505b15958661022c575b604051871581860152848152846102148261105c565b61022860405192828493845283019061112b565b0390f35b60405163a9059cbb60e01b81526001600160a01b039190911660048201526024810192909252909283916044918391600091165af180156102a257610275575b818180806101fe565b61029490823d841161029b575b61028c8183611077565b8101906111a8565b503861026c565b503d610282565b6040513d6000823e3d90fd5b90507fd2910f39771e835e5ce7a46de2960a760c01e9a619eb6dcc5edcc66769be01b76102d9611262565b6000926102f76040519283928352604089840152604083019061112b565b0390a1386101f4565b60008060233d11610353575b610317575b506101ef565b92505060007f8417b1b7f20d2303f09dcc366b1ba3cffaff11a075be3176b7d9438c7ff1ecc1604060009481519085825289820152a138610311565b505085600460003e600051600161030c565b5061036e6111f4565b8061037957506101ef565b92505060007f790be3f6f50a0117fedb3f7bc0884cb2ec714072a14a7fbff383d30ca387354a6103be60009460405191829186835260408b840152604083019061112b565b0390a138610311565b5060046000803e60005160e01c6101d9565b91508482156103ea575b50506101f6565b7fb284b558e6c999e6d852feb06fb775cb93820bf7cbeb38ede491e913735b5fe891604051908152a138846103e3565b610432919250873d891161029b5761028c8183611077565b90386101c6565b600080fd5b6040516334b1fceb60e21b8152336004820152602490fd5b346104395760203660031901126104395761046f610fed565b610477611150565b60018060a01b0380911690816bffffffffffffffffffffffff60a01b6001541617600155600054167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b34610439576000366003190112610439576001546040516001600160a01b039091168152602090f35b60a036600319011261043957610503610fed565b61050b611019565b90610514611003565b91608435916001600160401b0383116104395760209361053b61054794369060040161102f565b93909260243590611331565b604051908152f35b34610439576000366003190112610439576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610439576080366003190112610439576024356001600160401b038111610439576105c49036906004016110ea565b6105cc611003565b90303303610c2b57805181019060808160208401930312610439576105f360208201611292565b9161060060408301611292565b9160608101516001600160401b03811161043957826020610623928401016112a6565b916080820151926001600160401b0384116104395761064b60209283610698968601016112a6565b604051631bdf844960e31b81526001600160a01b03978816600482015260448035602483015289891690820152968616606488015260a060848801529593849182919060a483019061112b565b03816000305af19081156102a257600091610bd7575b7f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf92506106e96040519560a0602088015260c087019061112b565b91604086015261073d606086019660018060a01b0381168852608087019560018060a01b0316865261072d87600435958660a083015203601f198101895288611077565b60405193849360443591856111c0565b0390a18151820190608083830312610439576020830151916001600160401b03831161043957604061077d61078c946020806107869501918801016112a6565b94015194611292565b50611292565b50805181019060c081830312610439576107a860208201611292565b906107b560408201611292565b936107c2606083016112e8565b6107ce608084016112e8565b6107da60a08501611292565b9260c08501516001600160401b0381116104395760208801603f828801011215610439576020818701015161080e816112f9565b9661081c6040519889611077565b8188526020880190819a6020810160408560051b87850101011161043957604085830101925b60408560051b87850101018410610a9157505060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201879052909450602093508492506044915082906000908c165af180156102a257610a72575b50604051636b29e1bd60e01b81526001600160a01b0396871660048201529786166024890152604488015263ffffffff918216606488015216608486015290911660a484015260e060c48401525160e48301819052610104600582901b8401810192849290916000919084015b8183106109dd57846020818089038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156102a2576000916109aa575b7f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea602083604051908152a1602060405160018152f35b90506020813d6020116109d5575b816109c560209383611077565b8101031261043957516020610974565b3d91506109b8565b91935091936101031986820301825284516020606081604085019360018060a01b0381511686520151936040838201528451809452019201906000905b808210610a395750505060208060019296019201930190918593610928565b9091928351906004821015610a5c57602081600193829352019401920190610a1a565b634e487b7160e01b600052602160045260246000fd5b610a8a9060203d60201161029b5761028c8183611077565b50886108bb565b83516001600160401b03811161043957604084880182018403601f19011261043957604051908160408101106001600160401b03604084011117610bc15760408281018152858901820101516001600160a01b0381168103610439578252606081898701010151906001600160401b0382116104395760208501605f83838c8a01010101121561043957604082828b890101010151610b2f816112f9565b92610b3d6040519485611077565b81845260208401908b60608a838760208d01948860051b93010101010111610439578360608a838f9597838282898601010101965b8860051b9301010101018310610b9d5750505050602080840192909252509082529384019301610842565b8251946004861015610439578a838f97602080858793606097520197019698610b72565b634e487b7160e01b600052604160045260246000fd5b90506020823d602011610c23575b81610bf260209383611077565b81010312610439577f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf9151906106ae565b3d9150610be5565b60405163a4168a9360e01b8152336004820152602490fd5b604036600319011261043957610c57610fed565b6024356001600160401b03811161043957610c79610c8091369060040161102f565b36916110b3565b90604051610c8d8161105c565b601881526020917f216469726563745377617070657243616c6c4661696c6564000000000000000083830152344710610cf6576000808585610cdf969751910134855af1610cd9611262565b916115e4565b818180518101031261043957810151604051908152f35b60405162461bcd60e51b815260048101849052602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b3461043957602036600319011261043957610d63610fed565b610d6b611150565b6001600160a01b03166000908152600260205260409020805460ff19166001179055005b34610439576020366003190112610439576001600160a01b03610db0610fed565b166000526002602052602060ff604060002054166040519015158152f35b34610439576000366003190112610439576000546040516001600160a01b039091168152602090f35b34610439576000366003190112610439576001546001600160a01b033381831603610e68576bffffffffffffffffffffffff60a01b8092166001556000549133908316176000553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b3461043957600036600319011261043957610ed8611150565b600180546001600160a01b0319908116909155600080549182168155906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461043957602036600319011261043957610f3d610fed565b610f45611150565b6001600160a01b03166000908152600260205260409020805460ff19169055005b34610439576000366003190112610439576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610439576000366003190112610439577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b038216820361043957565b606435906001600160a01b038216820361043957565b604435906001600160a01b038216820361043957565b9181601f84011215610439578235916001600160401b038311610439576020838186019501011161043957565b604081019081106001600160401b03821117610bc157604052565b90601f801991011681019081106001600160401b03821117610bc157604052565b6001600160401b038111610bc157601f01601f191660200190565b9291926110bf82611098565b916110cd6040519384611077565b829481845281830111610439578281602093846000960137010152565b9080601f8301121561043957816020611105933591016110b3565b90565b60005b83811061111b5750506000910152565b818101518382015260200161110b565b9060209161114481518092818552858086019101611108565b601f01601f1916010190565b6000546001600160a01b0316330361116457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610439575180151581036104395790565b929493906060926111de91855260806020860152608085019061112b565b60408401959095526001600160a01b0316910152565b600060443d1061110557604051600319913d83016004833e81516001600160401b03918282113d60248401111761125157818401948551938411611259573d85010160208487010111611251575061110592910160200190611077565b949350505050565b50949350505050565b3d1561128d573d9061127382611098565b916112816040519384611077565b82523d6000602084013e565b606090565b51906001600160a01b038216820361043957565b81601f820112156104395780516112bc81611098565b926112ca6040519485611077565b81845260208284010111610439576111059160208085019101611108565b519063ffffffff8216820361043957565b6001600160401b038111610bc15760051b60200190565b908060209392818452848401376000828201840152601f01601f1916010190565b9490929460018060a01b03809116906000948286526020946002865260409860ff8a89205416156115ae578316928116908382146115a157816113ff5750509085859493926113a78a51998a968795869463f6b13d3f60e01b865260048601526024850152606060448501526064840191611310565b03925af19384156113f4575081936113c0575b50505090565b9091809350813d83116113ed575b6113d88183611077565b810103126113ea5750513880806113ba565b80fd5b503d6113ce565b51913d9150823e3d90fd5b89989193959851636eb1769f60e11b81523060048201528560248201528781604481885afa90811561159757918993918998979695938591611556575b50831161147c575b506113a7908b519a8b978896879563a2c554d360e01b8752600487015260248601526044850152608060648501526084840191611310565b919394959650915089518781019063095ea7b360e01b8252866024820152600019604482015260448152608081018181106001600160401b03821117611542578c5251899283929083905af16114d0611262565b81611512575b50156114e9578594939291879138611444565b885162461bcd60e51b8152600481018790526002602482015261534160f01b6044820152606490fd5b8051801592508890831561152a575b505050386114d6565b61153a93508201810191016111a8565b388781611521565b634e487b7160e01b8b52604160045260248bfd5b92945050919394959681813d8311611590575b6115738183611077565b8101031261158c5791839188979695948a94519061143c565b8880fd5b503d611569565b8b513d8b823e3d90fd5b5050965050505050505090565b895162461bcd60e51b815260048101889052600f60248201526e10b0b63637bbb2b229bbb0b83832b960891b6044820152606490fd5b9192901561164657508151156115f8575090565b3b156116015790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156116595750805190602001fd5b60405162461bcd60e51b81526020600482015290819061167d90602483019061112b565b0390fdfea2646970667358221220f26c4772eb6ef98aefb77b77ac349b60250f5cd70da812b5905b5bf52eb471ba64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163365a86fc14610fab5750806336f7d9f814610f665780633f2d413114610f24578063715018a614610ebf57806379ba509714610df75780638da5cb5b14610dce5780638ff1ed9714610d8f5780639938500614610d4a578063a0d7010214610c43578063a8cf939a14610594578063de4b05481461054f578063defc2248146104ef578063e30c3978146104c6578063f2fde38b146104565763fd614f41146100cf573861000f565b346104395760c0366003190112610439576024356004356100ee611019565b916100f7611003565b5060843563ffffffff811603610439576001600160401b0360a4358181116104395761012790369060040161102f565b90946001600160a01b0393917f00000000000000000000000000000000000000000000000000000000000000008516330361043e5786019460408787031261043957863596858816809803610439576020968782013595861161043957879561019092016110ea565b908285856000946101b66040519485938493635467c9cd60e11b855288600486016111c0565b03816000305af16000918161041a575b506103d957506001600060033d116103c7575b806308c379a01461036557634e487b7114610300575b6102ae575b505b15958661022c575b604051871581860152848152846102148261105c565b61022860405192828493845283019061112b565b0390f35b60405163a9059cbb60e01b81526001600160a01b039190911660048201526024810192909252909283916044918391600091165af180156102a257610275575b818180806101fe565b61029490823d841161029b575b61028c8183611077565b8101906111a8565b503861026c565b503d610282565b6040513d6000823e3d90fd5b90507fd2910f39771e835e5ce7a46de2960a760c01e9a619eb6dcc5edcc66769be01b76102d9611262565b6000926102f76040519283928352604089840152604083019061112b565b0390a1386101f4565b60008060233d11610353575b610317575b506101ef565b92505060007f8417b1b7f20d2303f09dcc366b1ba3cffaff11a075be3176b7d9438c7ff1ecc1604060009481519085825289820152a138610311565b505085600460003e600051600161030c565b5061036e6111f4565b8061037957506101ef565b92505060007f790be3f6f50a0117fedb3f7bc0884cb2ec714072a14a7fbff383d30ca387354a6103be60009460405191829186835260408b840152604083019061112b565b0390a138610311565b5060046000803e60005160e01c6101d9565b91508482156103ea575b50506101f6565b7fb284b558e6c999e6d852feb06fb775cb93820bf7cbeb38ede491e913735b5fe891604051908152a138846103e3565b610432919250873d891161029b5761028c8183611077565b90386101c6565b600080fd5b6040516334b1fceb60e21b8152336004820152602490fd5b346104395760203660031901126104395761046f610fed565b610477611150565b60018060a01b0380911690816bffffffffffffffffffffffff60a01b6001541617600155600054167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b34610439576000366003190112610439576001546040516001600160a01b039091168152602090f35b60a036600319011261043957610503610fed565b61050b611019565b90610514611003565b91608435916001600160401b0383116104395760209361053b61054794369060040161102f565b93909260243590611331565b604051908152f35b34610439576000366003190112610439576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610439576080366003190112610439576024356001600160401b038111610439576105c49036906004016110ea565b6105cc611003565b90303303610c2b57805181019060808160208401930312610439576105f360208201611292565b9161060060408301611292565b9160608101516001600160401b03811161043957826020610623928401016112a6565b916080820151926001600160401b0384116104395761064b60209283610698968601016112a6565b604051631bdf844960e31b81526001600160a01b03978816600482015260448035602483015289891690820152968616606488015260a060848801529593849182919060a483019061112b565b03816000305af19081156102a257600091610bd7575b7f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf92506106e96040519560a0602088015260c087019061112b565b91604086015261073d606086019660018060a01b0381168852608087019560018060a01b0316865261072d87600435958660a083015203601f198101895288611077565b60405193849360443591856111c0565b0390a18151820190608083830312610439576020830151916001600160401b03831161043957604061077d61078c946020806107869501918801016112a6565b94015194611292565b50611292565b50805181019060c081830312610439576107a860208201611292565b906107b560408201611292565b936107c2606083016112e8565b6107ce608084016112e8565b6107da60a08501611292565b9260c08501516001600160401b0381116104395760208801603f828801011215610439576020818701015161080e816112f9565b9661081c6040519889611077565b8188526020880190819a6020810160408560051b87850101011161043957604085830101925b60408560051b87850101018410610a9157505060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201879052909450602093508492506044915082906000908c165af180156102a257610a72575b50604051636b29e1bd60e01b81526001600160a01b0396871660048201529786166024890152604488015263ffffffff918216606488015216608486015290911660a484015260e060c48401525160e48301819052610104600582901b8401810192849290916000919084015b8183106109dd57846020818089038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156102a2576000916109aa575b7f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea602083604051908152a1602060405160018152f35b90506020813d6020116109d5575b816109c560209383611077565b8101031261043957516020610974565b3d91506109b8565b91935091936101031986820301825284516020606081604085019360018060a01b0381511686520151936040838201528451809452019201906000905b808210610a395750505060208060019296019201930190918593610928565b9091928351906004821015610a5c57602081600193829352019401920190610a1a565b634e487b7160e01b600052602160045260246000fd5b610a8a9060203d60201161029b5761028c8183611077565b50886108bb565b83516001600160401b03811161043957604084880182018403601f19011261043957604051908160408101106001600160401b03604084011117610bc15760408281018152858901820101516001600160a01b0381168103610439578252606081898701010151906001600160401b0382116104395760208501605f83838c8a01010101121561043957604082828b890101010151610b2f816112f9565b92610b3d6040519485611077565b81845260208401908b60608a838760208d01948860051b93010101010111610439578360608a838f9597838282898601010101965b8860051b9301010101018310610b9d5750505050602080840192909252509082529384019301610842565b8251946004861015610439578a838f97602080858793606097520197019698610b72565b634e487b7160e01b600052604160045260246000fd5b90506020823d602011610c23575b81610bf260209383611077565b81010312610439577f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf9151906106ae565b3d9150610be5565b60405163a4168a9360e01b8152336004820152602490fd5b604036600319011261043957610c57610fed565b6024356001600160401b03811161043957610c79610c8091369060040161102f565b36916110b3565b90604051610c8d8161105c565b601881526020917f216469726563745377617070657243616c6c4661696c6564000000000000000083830152344710610cf6576000808585610cdf969751910134855af1610cd9611262565b916115e4565b818180518101031261043957810151604051908152f35b60405162461bcd60e51b815260048101849052602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b3461043957602036600319011261043957610d63610fed565b610d6b611150565b6001600160a01b03166000908152600260205260409020805460ff19166001179055005b34610439576020366003190112610439576001600160a01b03610db0610fed565b166000526002602052602060ff604060002054166040519015158152f35b34610439576000366003190112610439576000546040516001600160a01b039091168152602090f35b34610439576000366003190112610439576001546001600160a01b033381831603610e68576bffffffffffffffffffffffff60a01b8092166001556000549133908316176000553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b3461043957600036600319011261043957610ed8611150565b600180546001600160a01b0319908116909155600080549182168155906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461043957602036600319011261043957610f3d610fed565b610f45611150565b6001600160a01b03166000908152600260205260409020805460ff19169055005b34610439576000366003190112610439576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610439576000366003190112610439577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b038216820361043957565b606435906001600160a01b038216820361043957565b604435906001600160a01b038216820361043957565b9181601f84011215610439578235916001600160401b038311610439576020838186019501011161043957565b604081019081106001600160401b03821117610bc157604052565b90601f801991011681019081106001600160401b03821117610bc157604052565b6001600160401b038111610bc157601f01601f191660200190565b9291926110bf82611098565b916110cd6040519384611077565b829481845281830111610439578281602093846000960137010152565b9080601f8301121561043957816020611105933591016110b3565b90565b60005b83811061111b5750506000910152565b818101518382015260200161110b565b9060209161114481518092818552858086019101611108565b601f01601f1916010190565b6000546001600160a01b0316330361116457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610439575180151581036104395790565b929493906060926111de91855260806020860152608085019061112b565b60408401959095526001600160a01b0316910152565b600060443d1061110557604051600319913d83016004833e81516001600160401b03918282113d60248401111761125157818401948551938411611259573d85010160208487010111611251575061110592910160200190611077565b949350505050565b50949350505050565b3d1561128d573d9061127382611098565b916112816040519384611077565b82523d6000602084013e565b606090565b51906001600160a01b038216820361043957565b81601f820112156104395780516112bc81611098565b926112ca6040519485611077565b81845260208284010111610439576111059160208085019101611108565b519063ffffffff8216820361043957565b6001600160401b038111610bc15760051b60200190565b908060209392818452848401376000828201840152601f01601f1916010190565b9490929460018060a01b03809116906000948286526020946002865260409860ff8a89205416156115ae578316928116908382146115a157816113ff5750509085859493926113a78a51998a968795869463f6b13d3f60e01b865260048601526024850152606060448501526064840191611310565b03925af19384156113f4575081936113c0575b50505090565b9091809350813d83116113ed575b6113d88183611077565b810103126113ea5750513880806113ba565b80fd5b503d6113ce565b51913d9150823e3d90fd5b89989193959851636eb1769f60e11b81523060048201528560248201528781604481885afa90811561159757918993918998979695938591611556575b50831161147c575b506113a7908b519a8b978896879563a2c554d360e01b8752600487015260248601526044850152608060648501526084840191611310565b919394959650915089518781019063095ea7b360e01b8252866024820152600019604482015260448152608081018181106001600160401b03821117611542578c5251899283929083905af16114d0611262565b81611512575b50156114e9578594939291879138611444565b885162461bcd60e51b8152600481018790526002602482015261534160f01b6044820152606490fd5b8051801592508890831561152a575b505050386114d6565b61153a93508201810191016111a8565b388781611521565b634e487b7160e01b8b52604160045260248bfd5b92945050919394959681813d8311611590575b6115738183611077565b8101031261158c5791839188979695948a94519061143c565b8880fd5b503d611569565b8b513d8b823e3d90fd5b5050965050505050505090565b895162461bcd60e51b815260048101889052600f60248201526e10b0b63637bbb2b229bbb0b83832b960891b6044820152606490fd5b9192901561164657508151156115f8575090565b3b156116015790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156116595750805190602001fd5b60405162461bcd60e51b81526020600482015290819061167d90602483019061112b565b0390fdfea2646970667358221220f26c4772eb6ef98aefb77b77ac349b60250f5cd70da812b5905b5bf52eb471ba64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to add."
        }
      },
      "directSwapperCall(address,bytes)": {
        "params": {
          "_swapper": "Address of the swapper to use.",
          "swapData": "Data to pass to the swapper. This data is encoded for a particular swap router."
        }
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.",
          "_swapper": "Address of the swapper to use.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "prepareAndForward(bytes32,bytes,uint256,address)": {
        "details": "This function is intended to be called by the xReceive function, and should not be called outside of that context. The function is `public` so that it can be used with try-catch.",
        "params": {
          "_amount": "- The amount of funds received in this transfer",
          "_asset": "- The asset of the funds received in this transfer",
          "_data": "- The data to be prepared",
          "_transferId": "- The transfer ID of the transfer that triggered this call"
        }
      },
      "removeSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "details": "_originSender and _origin are not used in this implementation because this is meant for an \"unauthenticated\" call. This means any router can call this function and no guarantees are made on the data passed in. This should only be used when there are funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no reason to call this function maliciously, because the router would be spending their own funds.",
        "params": {
          "_amount": "- The amount of funds received in this transfer.",
          "_asset": "- The asset of the funds received in this transfer.",
          "_callData": "- The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.",
          "_transferId": "- The transfer ID of the transfer that triggered this call."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ForwarderXReceiver__onlyConnext(address)": [
        {
          "notice": "ERRORS"
        }
      ]
    },
    "events": {
      "ForwardedFunctionCallFailed(bytes32)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "addSwapper(address)": {
        "notice": "Add a swapper to the list of allowed swappers."
      },
      "directSwapperCall(address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed."
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token."
      },
      "hub()": {
        "notice": "MeanFinance IDCAHub contract for deposit"
      },
      "prepareAndForward(bytes32,bytes,uint256,address)": {
        "notice": "Prepares the data for the function call and forwards it. This can execute any arbitrary function call in a two step process. For example, _prepare can be used to swap funds on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds."
      },
      "removeSwapper(address)": {
        "notice": "Remove a swapper from the list of allowed swappers."
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1334,
        "contract": "contracts/integration/MeanFinance/MeanFinanceTarget.sol:MeanFinanceTarget",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1447,
        "contract": "contracts/integration/MeanFinance/MeanFinanceTarget.sol:MeanFinanceTarget",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4944,
        "contract": "contracts/integration/MeanFinance/MeanFinanceTarget.sol:MeanFinanceTarget",
        "label": "allowedSwappers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}