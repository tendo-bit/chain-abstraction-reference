{
  "address": "0xDF97CadbcCeE9cfdB12A3e9BB7663E6753A71a0C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForwarderXReceiver__onlyConnext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForwarderXReceiver__prepareAndForward_notThis",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_errorMessage",
          "type": "string"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_errorCode",
          "type": "uint256"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_lowLevelData",
          "type": "bytes"
        }
      ],
      "name": "ForwardedFunctionCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "Prepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "addSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedSwappers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        }
      ],
      "name": "directSwapperCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        }
      ],
      "name": "exactSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "prepareAndForward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "removeSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb2bfcf9def23f3099100fdf796a12caba5598b186b0286fcede43ad6d35fc7f",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0xDF97CadbcCeE9cfdB12A3e9BB7663E6753A71a0C",
    "transactionIndex": 35,
    "gasUsed": "1471475",
    "logsBloom": "0x
    "blockHash": "0x2db8aeca0cb37e21d6e7ff6910272695d3cb0c05850cd47141b13020b2a1ae88",
    "transactionHash": "0xeb2bfcf9def23f3099100fdf796a12caba5598b186b0286fcede43ad6d35fc7f",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 42335374,
        "transactionHash": "0xeb2bfcf9def23f3099100fdf796a12caba5598b186b0286fcede43ad6d35fc7f",
        "address": "0xDF97CadbcCeE9cfdB12A3e9BB7663E6753A71a0C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x2db8aeca0cb37e21d6e7ff6910272695d3cb0c05850cd47141b13020b2a1ae88"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 42335374,
        "transactionHash": "0xeb2bfcf9def23f3099100fdf796a12caba5598b186b0286fcede43ad6d35fc7f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000fa3a02897b61300000000000000000000000000000000000000000000000149d1d564e1a3e4edb000000000000000000000000000000000000000000000e76a79c5ff8318fdead0000000000000000000000000000000000000000000000149c231c4b90c2edab000000000000000000000000000000000000000000000e76a89699fabb0b3fdd",
        "logIndex": 125,
        "blockHash": "0x2db8aeca0cb37e21d6e7ff6910272695d3cb0c05850cd47141b13020b2a1ae88"
      }
    ],
    "blockNumber": 42335374,
    "cumulativeGasUsed": "5911648",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x11984dc4465481512eb5b777E44061C158CF2259",
    "0xDb984f8cbc1cF893a18c2DA50282a1492234602c"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f66c88f93cf4c3d4622bf6dd049af95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForwarderXReceiver__onlyConnext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForwarderXReceiver__prepareAndForward_notThis\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_errorMessage\",\"type\":\"string\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_errorCode\",\"type\":\"uint256\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_lowLevelData\",\"type\":\"bytes\"}],\"name\":\"ForwardedFunctionCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"Prepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"addSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedSwappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"directSwapperCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"}],\"name\":\"exactSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"prepareAndForward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"removeSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to add.\"}},\"directSwapperCall(address,bytes)\":{\"params\":{\"_swapper\":\"Address of the swapper to use.\",\"swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router.\"}},\"exactSwap(address,uint256,address,address,bytes)\":{\"params\":{\"_amountIn\":\"Amount of tokens to swap.\",\"_fromAsset\":\"Address of the token to swap from.\",\"_swapData\":\"Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.\",\"_swapper\":\"Address of the swapper to use.\",\"_toAsset\":\"Address of the token to swap to.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"prepareAndForward(bytes32,bytes,uint256,address)\":{\"details\":\"This function is intended to be called by the xReceive function, and should not be called outside of that context. The function is `public` so that it can be used with try-catch.\",\"params\":{\"_amount\":\"- The amount of funds received in this transfer\",\"_asset\":\"- The asset of the funds received in this transfer\",\"_data\":\"- The data to be prepared\",\"_transferId\":\"- The transfer ID of the transfer that triggered this call\"}},\"removeSwapper(address)\":{\"params\":{\"_swapper\":\"Address of the swapper to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"details\":\"_originSender and _origin are not used in this implementation because this is meant for an \\\"unauthenticated\\\" call. This means any router can call this function and no guarantees are made on the data passed in. This should only be used when there are funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no reason to call this function maliciously, because the router would be spending their own funds.\",\"params\":{\"_amount\":\"- The amount of funds received in this transfer.\",\"_asset\":\"- The asset of the funds received in this transfer.\",\"_callData\":\"- The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.\",\"_transferId\":\"- The transfer ID of the transfer that triggered this call.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ForwarderXReceiver__onlyConnext(address)\":[{\"notice\":\"ERRORS\"}]},\"events\":{\"ForwardedFunctionCallFailed(bytes32)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"addSwapper(address)\":{\"notice\":\"Add a swapper to the list of allowed swappers.\"},\"directSwapperCall(address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed.\"},\"exactSwap(address,uint256,address,address,bytes)\":{\"notice\":\"Swap an exact amount of tokens for another token.\"},\"prepareAndForward(bytes32,bytes,uint256,address)\":{\"notice\":\"Prepares the data for the function call and forwards it. This can execute any arbitrary function call in a two step process. For example, _prepare can be used to swap funds on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds.\"},\"removeSwapper(address)\":{\"notice\":\"Remove a swapper from the list of allowed swappers.\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integration/Midas/MidasProtocolTarget.sol\":\"MidasProtocolTarget\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":connext-interfaces/=lib/connext-interfaces/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":vulcan/=lib/vulcan/src/\"],\"viaIR\":true},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b0676707cecd45da82623f18f73bd6bb733acae56dd7bd893f15c0dc08ea391\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37a35045d40f3bde688c70bb631581cbc609796514319db1361e061da8d9349b\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x5c879356795cc563440408404a52eaf672d4547949e0a5920fb17642303d9e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/destination/xreceivers/ForwarderXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {IConnext} from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport {IXReceiver} from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ForwarderXReceiver\\n * @author Connext\\n * @notice Abstract contract to allow for forwarding a call. Handles security and error handling.\\n * @dev This is meant to be used in unauthenticated flows, so the data passed in is not guaranteed to be correct.\\n * This is meant to be used when there are funds passed into the contract that need to be forwarded to another contract.\\n */\\nabstract contract ForwarderXReceiver is IXReceiver {\\n  // The Connext contract on this domain\\n  IConnext public immutable connext;\\n\\n  /// EVENTS\\n  event ForwardedFunctionCallFailed(bytes32 _transferId);\\n  event ForwardedFunctionCallFailed(bytes32 _transferId, string _errorMessage);\\n  event ForwardedFunctionCallFailed(bytes32 _transferId, uint _errorCode);\\n  event ForwardedFunctionCallFailed(bytes32 _transferId, bytes _lowLevelData);\\n  event Prepared(bytes32 _transferId, bytes _data, uint256 _amount, address _asset);\\n\\n  /// ERRORS\\n  error ForwarderXReceiver__onlyConnext(address sender);\\n  error ForwarderXReceiver__prepareAndForward_notThis(address sender);\\n\\n  /// MODIFIERS\\n  /** @notice A modifier to ensure that only the Connext contract on this domain can be the caller.\\n   * If this is not enforced, then funds on this contract may potentially be claimed by any EOA.\\n   */\\n  modifier onlyConnext() {\\n    if (msg.sender != address(connext)) {\\n      revert ForwarderXReceiver__onlyConnext(msg.sender);\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @param _connext - The address of the Connext contract on this domain\\n   */\\n  constructor(address _connext) {\\n    connext = IConnext(_connext);\\n  }\\n\\n  /**\\n   * @notice Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer.\\n   * @dev _originSender and _origin are not used in this implementation because this is meant for an \\\"unauthenticated\\\" call. This means\\n   * any router can call this function and no guarantees are made on the data passed in. This should only be used when there are\\n   * funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no\\n   * reason to call this function maliciously, because the router would be spending their own funds.\\n   * @param _transferId - The transfer ID of the transfer that triggered this call.\\n   * @param _amount - The amount of funds received in this transfer.\\n   * @param _asset - The asset of the funds received in this transfer.\\n   * @param _callData - The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.\\n   */\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount, // Final amount received via Connext (after AMM swaps, if applicable)\\n    address _asset,\\n    address /*_originSender*/,\\n    uint32 /*_origin*/,\\n    bytes calldata _callData\\n  ) external onlyConnext returns (bytes memory) {\\n    // Decode calldata\\n    (address _fallbackAddress, bytes memory _data) = abi.decode(_callData, (address, bytes));\\n\\n    bool successfulForward;\\n    try this.prepareAndForward(_transferId, _data, _amount, _asset) returns (bool success) {\\n      successfulForward = success;\\n      if (!success) {\\n        emit ForwardedFunctionCallFailed(_transferId);\\n      }\\n      // transfer to fallback address if forwardFunctionCall fails\\n    } catch Error(string memory _errorMessage) {\\n      // This is executed in case\\n      // revert was called with a reason string\\n      successfulForward = false;\\n      emit ForwardedFunctionCallFailed(_transferId, _errorMessage);\\n    } catch Panic(uint _errorCode) {\\n      // This is executed in case of a panic,\\n      // i.e. a serious error like division by zero\\n      // or overflow. The error code can be used\\n      // to determine the kind of error.\\n      successfulForward = false;\\n      emit ForwardedFunctionCallFailed(_transferId, _errorCode);\\n    } catch (bytes memory _lowLevelData) {\\n      // This is executed in case revert() was used.\\n      successfulForward = false;\\n      emit ForwardedFunctionCallFailed(_transferId, _lowLevelData);\\n    }\\n    if (!successfulForward) {\\n      IERC20(_asset).transfer(_fallbackAddress, _amount);\\n    }\\n    // Return the success status of the forwardFunctionCall\\n    return abi.encode(successfulForward);\\n  }\\n\\n  /// INTERNAL\\n  /**\\n   * @notice Prepares the data for the function call and forwards it. This can execute\\n   * any arbitrary function call in a two step process. For example, _prepare can be used to swap funds\\n   * on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds.\\n   * @dev This function is intended to be called by the xReceive function, and should not be called outside\\n   * of that context. The function is `public` so that it can be used with try-catch.\\n   *\\n   * @param _transferId - The transfer ID of the transfer that triggered this call\\n   * @param _data - The data to be prepared\\n   * @param _amount - The amount of funds received in this transfer\\n   * @param _asset - The asset of the funds received in this transfer\\n   */\\n  function prepareAndForward(\\n    bytes32 _transferId,\\n    bytes memory _data,\\n    uint256 _amount,\\n    address _asset\\n  ) public returns (bool) {\\n    if (msg.sender != address(this)) {\\n      revert ForwarderXReceiver__prepareAndForward_notThis(msg.sender);\\n    }\\n    // Prepare for forwarding\\n    bytes memory _prepared = _prepare(_transferId, _data, _amount, _asset);\\n    emit Prepared(_transferId, _data, _amount, _asset);\\n\\n    // Forward the function call\\n    return _forwardFunctionCall(_prepared, _transferId, _amount, _asset);\\n  }\\n\\n  /// INTERNAL VIRTUAL\\n  /**\\n   * @notice Prepares the data for the function call. This can execute any arbitrary function call in a two step process.\\n   * For example, _prepare can be used to swap funds on a DEX, or do any other type of preparation, and pass on the\\n   * prepared data to _forwardFunctionCall.\\n   * @dev This function needs to be overriden in implementations of this contract. If no preparation is needed, this\\n   * function can be overriden to return the data as is.\\n   *\\n   * @param _transferId - The transfer ID of the transfer that triggered this call\\n   * @param _data - The data to be prepared\\n   * @param _amount - The amount of funds received in this transfer\\n   * @param _asset - The asset of the funds received in this transfer\\n   */\\n  function _prepare(\\n    bytes32 _transferId,\\n    bytes memory _data,\\n    uint256 _amount,\\n    address _asset\\n  ) internal virtual returns (bytes memory) {\\n    return abi.encode(_data, _transferId, _amount, _asset);\\n  }\\n\\n  /**\\n   * @notice Forwards the function call. This can execute any arbitrary function call in a two step process.\\n   * The first step is to prepare the data, and the second step is to forward the function call to a\\n   * given contract.\\n   * @dev This function needs to be overriden in implementations of this contract.\\n   *\\n   * @param _preparedData - The data to be forwarded, after processing in _prepare\\n   * @param _transferId - The transfer ID of the transfer that triggered this call\\n   * @param _amount - The amount of funds received in this transfer\\n   * @param _asset - The asset of the funds received in this transfer\\n   */\\n  function _forwardFunctionCall(\\n    bytes memory _preparedData,\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset\\n  ) internal virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0xc6f416d3670007b5c2ce5e066f92a62a24a9ccda207d87f0e1d12acc73977df0\",\"license\":\"UNLICENSED\"},\"contracts/destination/xreceivers/Swap/SwapForwarderXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ForwarderXReceiver} from \\\"../ForwarderXReceiver.sol\\\";\\nimport {SwapAdapter} from \\\"../../../shared/Swap/SwapAdapter.sol\\\";\\n\\n/**\\n * @title SwapForwarderXReceiver\\n * @author Connext\\n * @notice Abstract contract to allow for swapping tokens before forwarding a call.\\n */\\nabstract contract SwapForwarderXReceiver is ForwarderXReceiver, SwapAdapter {\\n  using Address for address;\\n\\n  /// @dev The address of the Connext contract on this domain.\\n  constructor(address _connext) ForwarderXReceiver(_connext) {}\\n\\n  /// INTERNAL\\n  /**\\n   * @notice Prepare the data by calling to the swap adapter. Return the data to be swapped.\\n   * @dev This is called by the xReceive function so the input data is provided by the Connext bridge.\\n   * @param _transferId The transferId of the transfer.\\n   * @param _data The data to be swapped.\\n   * @param _amount The amount to be swapped.\\n   * @param _asset The incoming asset to be swapped.\\n   */\\n  function _prepare(\\n    bytes32 _transferId,\\n    bytes memory _data,\\n    uint256 _amount,\\n    address _asset\\n  ) internal override returns (bytes memory) {\\n    (address _swapper, address _toAsset, bytes memory _swapData, bytes memory _forwardCallData) = abi.decode(\\n      _data,\\n      (address, address, bytes, bytes)\\n    );\\n\\n    uint256 _amountOut = this.exactSwap(_swapper, _amount, _asset, _toAsset, _swapData);\\n\\n    return abi.encode(_forwardCallData, _amountOut, _asset, _toAsset, _transferId);\\n  }\\n}\\n\",\"keccak256\":\"0x245f785de31c08f83e7d3ffd54cf96c0ecf0e62beea902f69664c8bc5de0e149\",\"license\":\"UNLICENSED\"},\"contracts/integration/Midas/MidasProtocolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {CTokenInterface} from \\\"./interfaces/CTokenInterface.sol\\\";\\nimport {ICToken, ICErc20} from \\\"./interfaces/ICErc20.sol\\\";\\nimport {IComptroller} from \\\"./interfaces/IComptroller.sol\\\";\\n\\ncontract MidasProtocolAdapter {\\n  IComptroller public immutable comptroller;\\n\\n  constructor(address _comptroller) {\\n    comptroller = IComptroller(_comptroller);\\n  }\\n\\n  /**\\n   * @dev Internal function to mint cTokens and transfer them to the `minter`\\n   *\\n   * @param cTokenAddress The cToken address to mint\\n   * @param asset The underlying asset address\\n   * @param amount The amount of underlying asset\\n   * @param minter The recipient to transfer minted cTokens\\n   */\\n  function _mint(address cTokenAddress, address asset, uint256 amount, address minter) internal {\\n    require(minter != address(0), \\\"zero address\\\");\\n    require(amount > 0, \\\"zero amount\\\");\\n\\n    ICToken cToken = ICToken(cTokenAddress);\\n\\n    // Enter the market if the contract didn't enter the market, otherwise skip\\n    if (comptroller.checkMembership(address(this), cToken)) {\\n      address[] memory cTokens = new address[](1);\\n      cTokens[0] = cTokenAddress;\\n      comptroller.enterMarkets(cTokens);\\n    }\\n\\n    // Approve underlying\\n    if (!cToken.isCEther()) {\\n      if (IERC20(asset).allowance(address(this), cTokenAddress) < amount) {\\n        IERC20(asset).approve(cTokenAddress, type(uint256).max);\\n      }\\n    }\\n\\n    // Mint to this contract\\n    require(cToken.mint(amount) == 0, \\\"mint failed\\\");\\n\\n    // Transfer all the cTokens to the minter\\n    CTokenInterface(cTokenAddress).asCTokenExtensionInterface().transfer(minter, cToken.balanceOf(address(this)));\\n  }\\n}\\n\",\"keccak256\":\"0xfa0a7f757e2cf71f293cc4a2740e231997f4325dca50a35925eb6e77ddc2bbe7\",\"license\":\"UNLICENSED\"},\"contracts/integration/Midas/MidasProtocolTarget.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {MidasProtocolAdapter} from \\\"./MidasProtocolAdapter.sol\\\";\\nimport {SwapForwarderXReceiver} from \\\"../../destination/xreceivers/Swap/SwapForwarderXReceiver.sol\\\";\\n\\ncontract MidasProtocolTarget is MidasProtocolAdapter, SwapForwarderXReceiver {\\n  constructor(\\n    address _connext,\\n    address _comptroller\\n  ) SwapForwarderXReceiver(_connext) MidasProtocolAdapter(_comptroller) {}\\n\\n  function _forwardFunctionCall(\\n    bytes memory _preparedData,\\n    bytes32 /*_transferId*/,\\n    uint256 /*_amount*/,\\n    address /*_asset*/\\n  ) internal override returns (bool) {\\n    (bytes memory _forwardCallData, uint256 _amountOut, , ) = abi.decode(\\n      _preparedData,\\n      (bytes, uint256, address, address)\\n    );\\n    (address _cTokenAddress, address _asset, address _minter) = abi.decode(\\n      _forwardCallData,\\n      (address, address, address)\\n    );\\n\\n    _mint(_cTokenAddress, _asset, _amountOut, _minter);\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x6a2ffe856336707346000321d6b3ce52859da9cd4bed2256d7baab34d68d4fbb\",\"license\":\"UNLICENSED\"},\"contracts/integration/Midas/interfaces/CTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface CTokenExtensionInterface {\\n  function transfer(address dst, uint256 amount) external returns (bool);\\n}\\n\\ninterface CTokenInterface {\\n  function asCTokenExtensionInterface() external view returns (CTokenExtensionInterface);\\n}\\n\",\"keccak256\":\"0xd6f9c0e507152d858153b8e69fe66cb42e64162f0d14096ace94d61e4bdc53c4\",\"license\":\"UNLICENSED\"},\"contracts/integration/Midas/interfaces/ICErc20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface ICErc20 is ICToken {\\n  function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x844df85db4da7e5d3bee24d5d57fa83ec7fce84908d62a5bae9609b87f7aef71\",\"license\":\"UNLICENSED\"},\"contracts/integration/Midas/interfaces/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface ICToken {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function fuseAdminHasRights() external view returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function comptroller() external view returns (address);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function fuseFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function isCToken() external view returns (bool);\\n\\n  function isCEther() external view returns (bool);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function totalBorrowsCurrent() external returns (uint256);\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function borrowBalanceStored(address account) external view returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  function exchangeRateHypothetical() external view returns (uint256);\\n\\n  function accrueInterest() external returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\n\\n  function feeSeizeShareMantissa() external view returns (uint256);\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\\n\\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\\n\\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3f8b127f3c9e99550d9df281dbbdf67edcc008d7014e99834481bdf33bd5ddb6\",\"license\":\"UNLICENSED\"},\"contracts/integration/Midas/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\ninterface IComptroller {\\n  function checkMembership(address account, ICToken cToken) external view returns (bool);\\n\\n  function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe6fcc3b66f3d82bbdc009d48b3ccd15c24de641bf3c293971ea98bf316d2231e\",\"license\":\"UNLICENSED\"},\"contracts/shared/Swap/SwapAdapter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7 <0.9.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {ISwapper} from \\\"./interfaces/ISwapper.sol\\\";\\n\\n/**\\n * @title SwapAdapter\\n * @author Connext\\n * @notice This contract is used to provide a generic interface to swap tokens through\\n * a variety of different swap routers. It is used to swap tokens\\n * before proceeding with other actions. Swap router implementations can be added by owner.\\n * This is designed to be owned by the Connext DAO and swappers can be added by the DAO.\\n */\\ncontract SwapAdapter is Ownable2Step {\\n  using Address for address;\\n  using Address for address payable;\\n\\n  mapping(address => bool) public allowedSwappers;\\n\\n  address public immutable uniswapSwapRouter = address(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n\\n  constructor() {\\n    allowedSwappers[address(this)] = true;\\n    allowedSwappers[uniswapSwapRouter] = true;\\n  }\\n\\n  /// Payable\\n  // @dev On the origin side, we can accept native assets for a swap.\\n  receive() external payable virtual {}\\n\\n  /// ADMIN\\n  /**\\n   * @notice Add a swapper to the list of allowed swappers.\\n   * @param _swapper Address of the swapper to add.\\n   */\\n  function addSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = true;\\n  }\\n\\n  /**\\n   * @notice Remove a swapper from the list of allowed swappers.\\n   * @param _swapper Address of the swapper to remove.\\n   */\\n  function removeSwapper(address _swapper) external onlyOwner {\\n    allowedSwappers[_swapper] = false;\\n  }\\n\\n  /// EXTERNAL\\n  /**\\n   * @notice Swap an exact amount of tokens for another token.\\n   * @param _swapper Address of the swapper to use.\\n   * @param _amountIn Amount of tokens to swap.\\n   * @param _fromAsset Address of the token to swap from.\\n   * @param _toAsset Address of the token to swap to.\\n   * @param _swapData Data to pass to the swapper. This data is encoded for a particular swap router, usually given\\n   * by an API. The swapper will decode the data and re-encode it with the new amountIn.\\n   */\\n  function exactSwap(\\n    address _swapper,\\n    uint256 _amountIn,\\n    address _fromAsset,\\n    address _toAsset,\\n    bytes calldata _swapData // comes directly from API with swap data encoded\\n  ) external payable returns (uint256 amountOut) {\\n    require(allowedSwappers[_swapper], \\\"!allowedSwapper\\\");\\n\\n    // If from == to, no need to swap\\n    if (_fromAsset == _toAsset) {\\n      return _amountIn;\\n    }\\n\\n    if (_fromAsset == address(0)) {\\n      amountOut = ISwapper(_swapper).swapETH(_amountIn, _toAsset, _swapData);\\n    } else {\\n      if (IERC20(_fromAsset).allowance(address(this), _swapper) < _amountIn) {\\n        TransferHelper.safeApprove(_fromAsset, _swapper, type(uint256).max);\\n      }\\n      amountOut = ISwapper(_swapper).swap(_amountIn, _fromAsset, _toAsset, _swapData);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow\\n   * easy swaps on the source side where the amount does not need to be changed.\\n   * @param _swapper Address of the swapper to use.\\n   * @param swapData Data to pass to the swapper. This data is encoded for a particular swap router.\\n   */\\n  function directSwapperCall(address _swapper, bytes calldata swapData) external payable returns (uint256 amountOut) {\\n    bytes memory ret = _swapper.functionCallWithValue(swapData, msg.value, \\\"!directSwapperCallFailed\\\");\\n    amountOut = abi.decode(ret, (uint256));\\n  }\\n}\\n\",\"keccak256\":\"0x278cd630093a943227629d253cefb474dc360628116453d9494825d81087c981\",\"license\":\"MIT\"},\"contracts/shared/Swap/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.17;\\n\\ninterface ISwapper {\\n  function swap(\\n    uint256 _amountIn,\\n    address _tokenIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external returns (uint256 amountOut);\\n\\n  function swapETH(\\n    uint256 _amountIn,\\n    address _tokenOut,\\n    bytes calldata _swapData\\n  ) external payable returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x444fec1912aaa57621d4bd37f2a77489796668ae8e6e5bff6100d28ea02ae773\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60e03461012d57601f6119aa38819003918201601f19168301916001600160401b0383118484101761013257808492604094855283398101031261012d5760208161004c61006193610148565b6001600160a01b039384939192849201610148565b166080521660a05260018060a01b0319806001541660015560009081549033908216178255604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a36001604073e592427a0aece92de3edee1f18e0157c05861564928360c05230815260026020528181209360ff199484868254161790558152209182541617905561184d908161015d82396080518181816107ee01528181610be101526110ec015260a0518181816101380152610561015260c0518161116e0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361012d5756fe60806040908082526004361015610020575b5050361561001e57600080fd5b005b60003560e01c90816336f7d9f81461115b575080633f2d41311461111b5780635fe3b567146110d7578063715018a61461107257806379ba509714610fa85780638da5cb5b14610f7f5780638ff1ed9714610f415780639938500614610efe578063a0d7010214610df9578063a8cf939a14610590578063de4b05481461054c578063defc2248146104eb578063e30c3978146104c2578063f2fde38b146104525763fd614f41146100d25780610011565b346104365760c0366003190112610436576004356024356100f16111c9565b926100fa6111b3565b5060843563ffffffff811603610436576001600160401b0360a4358181116104365761012a9036906004016111df565b90956001600160a01b0394917f00000000000000000000000000000000000000000000000000000000000000008616330361043b578701958488880312610436578735978689168099036104365760209788820135958611610436578895610192920161129a565b908285856000946101b78a519485938493635467c9cd60e11b85528860048601611370565b03816000305af160009181610417575b506103d757506001600060033d116103c5575b806308c379a01461036657634e487b7114610302575b6102b3575b505b15968761022b575b845188158186015284815284610227876102188461120c565b519282849384528301906112db565b0390f35b845163a9059cbb60e01b81526001600160a01b0391909116600482015260248101929092529293909283916044918391600091165af180156102a85790610227929161027b575b808085926101ff565b61029a90843d86116102a1575b6102928183611227565b810190611358565b5038610272565b503d610288565b82513d6000823e3d90fd5b90507fd2910f39771e835e5ce7a46de2960a760c01e9a619eb6dcc5edcc66769be01b76102de611412565b6000926102f9885192839283528989840152898301906112db565b0390a1386101f5565b60008060233d11610354575b610319575b506101f0565b92505060007f8417b1b7f20d2303f09dcc366b1ba3cffaff11a075be3176b7d9438c7ff1ecc18760009481519085825289820152a138610313565b505085600460003e600051600161030e565b5061036f6113a4565b8061037a57506101f0565b92505060007f790be3f6f50a0117fedb3f7bc0884cb2ec714072a14a7fbff383d30ca387354a6103bc60009489519182918683528b8b8401528b8301906112db565b0390a138610313565b5060046000803e60005160e01c6101da565b91508482156103e8575b50506101f7565b7fb284b558e6c999e6d852feb06fb775cb93820bf7cbeb38ede491e913735b5fe8918751908152a138846103e1565b61042f919250873d89116102a1576102928183611227565b90386101c7565b600080fd5b84516334b1fceb60e21b8152336004820152602490fd5b346104365760203660031901126104365761046b61119d565b610473611300565b60018060a01b0380911690816bffffffffffffffffffffffff60a01b6001541617600155600054167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b50346104365760003660031901126104365760015490516001600160a01b039091168152602090f35b5060a03660031901126104365761050061119d565b906105096111c9565b916105126111b3565b92608435916001600160401b038311610436576020946105396105459436906004016111df565b939092602435906114b9565b9051908152f35b503461043657600036600319011261043657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610436576080366003190112610436576024356001600160401b038111610436576105c190369060040161129a565b906105ca6111b3565b303303610de257825183019060808460208401930312610436576105f060208501611442565b916105fc848601611442565b9460608101516001600160401b0381116104365782602061061f92840101611456565b916080820151906001600160401b03821161043657602061064292840101611456565b90855194631bdf844960e31b865260018060a01b031660048601526044358060248701526020868061069d60018060a01b0389169b8c604484015260018060a01b03169788606484015260a0608484015260a48301906112db565b03816000305af1958615610dd757600096610d81575b50907f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf9161072f8851966106f3602089019660a0885260c08a01906112db565b928a8901998a52606089019b8c526080890197885261072489600435958660a083015203601f1981018b528a611227565b8a5194859485611370565b0390a1825183019060808483031261043657516001600160401b0381116104365761077693602061076892816107709501920101611456565b935195611442565b50611442565b506060818051810103126104365761079060208201611442565b9261079c838301611442565b916001600160a01b03906107b290606001611442565b16918215610d4e578115610d1c57835163929fe9a160e01b81523060048201526001600160a01b038681166024830152602090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610b4f57600091610cfd575b50610b79575b8351632b1e137760e21b81526020816004816001600160a01b038a165afa908115610b4f57600091610b5a575b5015610a69575b50825163140e25ad60e31b8152600481019190915260208160248160006001600160a01b0389165af19081156109b357600091610a37575b50610a05578151634faf793960e11b8152926020846004816001600160a01b0385165afa9384156109b3576000946109be575b5082516370a0823160e01b81523060048201529190602090839060249082906001600160a01b03165afa9182156109b35760009261097d575b50825163a9059cbb60e01b81526001600160a01b039091166004820152602481019190915291602090839081600081604481015b03926001600160a01b03165af191821561097257602092610955575b505160018152f35b61096b90833d85116102a1576102928183611227565b503861094d565b50513d6000823e3d90fd5b91506020823d6020116109ab575b8161099860209383611227565b81010312610436579051906109316108fd565b3d915061098b565b83513d6000823e3d90fd5b9093506020813d6020116109fd575b816109da60209383611227565b810103126104365751906001600160a01b038216820361043657909260206108c4565b3d91506109cd565b815162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b6044820152606490fd5b90506020813d602011610a61575b81610a5260209383611227565b81010312610436575138610891565b3d9150610a45565b8351636eb1769f60e11b81523060048201526001600160a01b0386811660248301529190911690602081604481855afa908115610b4f57908391600091610b1a575b50101561085957835163095ea7b360e01b81526001600160a01b0386166004820152600019602482015290602090829060449082906000905af18015610b0f571561085957610b089060203d6020116102a1576102928183611227565b5038610859565b84513d6000823e3d90fd5b9150506020813d602011610b47575b81610b3660209383611227565b810103126104365782905138610aab565b3d9150610b29565b85513d6000823e3d90fd5b610b73915060203d6020116102a1576102928183611227565b38610852565b8351610b848161120c565b60018152602081016020368237815115610ce7576001600160a01b03871681528551631853304760e31b8152602060048201529151602483018190528291604483019160005b818110610cc55750600093928390039150829050837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015610b4f57610c1c575b50610825565b3d806000833e610c2c8183611227565b810190602081830312610436578051906001600160401b038211610436570181601f82011215610436578051906001600160401b038211610caf576020808360051b93895190610c7e83870183611227565b8152019282010192831161043657602001905b828210610c9f575050610c16565b8151815260209182019101610c91565b634e487b7160e01b600052604160045260246000fd5b82516001600160a01b0316845285945060209384019390920191600101610bca565b634e487b7160e01b600052603260045260246000fd5b610d16915060203d6020116102a1576102928183611227565b3861081f565b835162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b835162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b919095506020823d602011610dcf575b81610d9e60209383611227565b81010312610436579051947f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf6106b3565b3d9150610d91565b87513d6000823e3d90fd5b815163a4168a9360e01b8152336004820152602490fd5b508060031936011261043657610e0d61119d565b6024356001600160401b03811161043657610e2f610e369136906004016111df565b3691611263565b918051610e428161120c565b601881526020927f216469726563745377617070657243616c6c4661696c6564000000000000000084830152344710610eab576000808686610e9596979851910134855af1610e8f611412565b9161177a565b8281805181010312610436578201519051908152f35b825162461bcd60e51b815260048101859052602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b503461043657602036600319011261043657610f1861119d565b610f20611300565b6001600160a01b03166000908152600260205220805460ff19166001179055005b5034610436576020366003190112610436576020906001600160a01b03610f6661119d565b166000526002825260ff81600020541690519015158152f35b50346104365760003660031901126104365760005490516001600160a01b039091168152602090f35b503461043657600036600319011261043657600154906001600160a01b0390338284160361101d57506bffffffffffffffffffffffff60a01b8092166001556000549133908316176000553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b5162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b346104365760003660031901126104365761108b611300565b600180546001600160a01b0319908116909155600080549182168155906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b503461043657600036600319011261043657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346104365760203660031901126104365761113561119d565b61113d611300565b6001600160a01b03166000908152600260205220805460ff19169055005b34610436576000366003190112610436577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b038216820361043657565b606435906001600160a01b038216820361043657565b604435906001600160a01b038216820361043657565b9181601f84011215610436578235916001600160401b038311610436576020838186019501011161043657565b604081019081106001600160401b03821117610caf57604052565b90601f801991011681019081106001600160401b03821117610caf57604052565b6001600160401b038111610caf57601f01601f191660200190565b92919261126f82611248565b9161127d6040519384611227565b829481845281830111610436578281602093846000960137010152565b9080601f83011215610436578160206112b593359101611263565b90565b60005b8381106112cb5750506000910152565b81810151838201526020016112bb565b906020916112f4815180928185528580860191016112b8565b601f01601f1916010190565b6000546001600160a01b0316330361131457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610436575180151581036104365790565b9294939060609261138e9185526080602086015260808501906112db565b60408401959095526001600160a01b0316910152565b600060443d106112b557604051600319913d83016004833e81516001600160401b03918282113d60248401111761140157818401948551938411611409573d8501016020848701011161140157506112b592910160200190611227565b949350505050565b50949350505050565b3d1561143d573d9061142382611248565b916114316040519384611227565b82523d6000602084013e565b606090565b51906001600160a01b038216820361043657565b81601f8201121561043657805161146c81611248565b9261147a6040519485611227565b81845260208284010111610436576112b591602080850191016112b8565b908060209392818452848401376000828201840152601f01601f1916010190565b92949060018060a01b03808516916000958387526020956002875260409960ff8b8a205416156117445784169381169184831461173657826115875750505090858594939261152f8a51998a968795869463f6b13d3f60e01b865260048601526024850152606060448501526064840191611498565b03925af193841561157c57508193611548575b50505090565b9091809350813d8311611575575b6115608183611227565b81010312611572575051388080611542565b80fd5b503d611556565b51913d9150823e3d90fd5b8a51636eb1769f60e11b81523060048201526001600160a01b03919091166024820152959893959193918781604481885afa90811561172c579189939189989796959385916116eb575b508311611611575b5061152f908b519a8b978896879563a2c554d360e01b8752600487015260248601526044850152608060648501526084840191611498565b919394959650915089518781019063095ea7b360e01b8252866024820152600019604482015260448152608081018181106001600160401b038211176116d7578c5251899283929083905af1611665611412565b816116a7575b501561167e5785949392918791386115d9565b885162461bcd60e51b8152600481018790526002602482015261534160f01b6044820152606490fd5b805180159250889083156116bf575b5050503861166b565b6116cf9350820181019101611358565b3887816116b6565b634e487b7160e01b8b52604160045260248bfd5b92945050919394959681813d8311611725575b6117088183611227565b810103126117215791839188979695948a9451906115d1565b8880fd5b503d6116fe565b8b513d8b823e3d90fd5b505050965050505050505090565b8a5162461bcd60e51b815260048101899052600f60248201526e10b0b63637bbb2b229bbb0b83832b960891b6044820152606490fd5b919290156117dc575081511561178e575090565b3b156117975790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156117ef5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906118139060248301906112db565b0390fdfea264697066735822122098b74800d6152b8cafdfa8a582e692950992f16ac3de40ed61f8eb0a850a478364736f6c63430008130033",
  "deployedBytecode": "0x60806040908082526004361015610020575b5050361561001e57600080fd5b005b60003560e01c90816336f7d9f81461115b575080633f2d41311461111b5780635fe3b567146110d7578063715018a61461107257806379ba509714610fa85780638da5cb5b14610f7f5780638ff1ed9714610f415780639938500614610efe578063a0d7010214610df9578063a8cf939a14610590578063de4b05481461054c578063defc2248146104eb578063e30c3978146104c2578063f2fde38b146104525763fd614f41146100d25780610011565b346104365760c0366003190112610436576004356024356100f16111c9565b926100fa6111b3565b5060843563ffffffff811603610436576001600160401b0360a4358181116104365761012a9036906004016111df565b90956001600160a01b0394917f00000000000000000000000000000000000000000000000000000000000000008616330361043b578701958488880312610436578735978689168099036104365760209788820135958611610436578895610192920161129a565b908285856000946101b78a519485938493635467c9cd60e11b85528860048601611370565b03816000305af160009181610417575b506103d757506001600060033d116103c5575b806308c379a01461036657634e487b7114610302575b6102b3575b505b15968761022b575b845188158186015284815284610227876102188461120c565b519282849384528301906112db565b0390f35b845163a9059cbb60e01b81526001600160a01b0391909116600482015260248101929092529293909283916044918391600091165af180156102a85790610227929161027b575b808085926101ff565b61029a90843d86116102a1575b6102928183611227565b810190611358565b5038610272565b503d610288565b82513d6000823e3d90fd5b90507fd2910f39771e835e5ce7a46de2960a760c01e9a619eb6dcc5edcc66769be01b76102de611412565b6000926102f9885192839283528989840152898301906112db565b0390a1386101f5565b60008060233d11610354575b610319575b506101f0565b92505060007f8417b1b7f20d2303f09dcc366b1ba3cffaff11a075be3176b7d9438c7ff1ecc18760009481519085825289820152a138610313565b505085600460003e600051600161030e565b5061036f6113a4565b8061037a57506101f0565b92505060007f790be3f6f50a0117fedb3f7bc0884cb2ec714072a14a7fbff383d30ca387354a6103bc60009489519182918683528b8b8401528b8301906112db565b0390a138610313565b5060046000803e60005160e01c6101da565b91508482156103e8575b50506101f7565b7fb284b558e6c999e6d852feb06fb775cb93820bf7cbeb38ede491e913735b5fe8918751908152a138846103e1565b61042f919250873d89116102a1576102928183611227565b90386101c7565b600080fd5b84516334b1fceb60e21b8152336004820152602490fd5b346104365760203660031901126104365761046b61119d565b610473611300565b60018060a01b0380911690816bffffffffffffffffffffffff60a01b6001541617600155600054167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b50346104365760003660031901126104365760015490516001600160a01b039091168152602090f35b5060a03660031901126104365761050061119d565b906105096111c9565b916105126111b3565b92608435916001600160401b038311610436576020946105396105459436906004016111df565b939092602435906114b9565b9051908152f35b503461043657600036600319011261043657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610436576080366003190112610436576024356001600160401b038111610436576105c190369060040161129a565b906105ca6111b3565b303303610de257825183019060808460208401930312610436576105f060208501611442565b916105fc848601611442565b9460608101516001600160401b0381116104365782602061061f92840101611456565b916080820151906001600160401b03821161043657602061064292840101611456565b90855194631bdf844960e31b865260018060a01b031660048601526044358060248701526020868061069d60018060a01b0389169b8c604484015260018060a01b03169788606484015260a0608484015260a48301906112db565b03816000305af1958615610dd757600096610d81575b50907f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf9161072f8851966106f3602089019660a0885260c08a01906112db565b928a8901998a52606089019b8c526080890197885261072489600435958660a083015203601f1981018b528a611227565b8a5194859485611370565b0390a1825183019060808483031261043657516001600160401b0381116104365761077693602061076892816107709501920101611456565b935195611442565b50611442565b506060818051810103126104365761079060208201611442565b9261079c838301611442565b916001600160a01b03906107b290606001611442565b16918215610d4e578115610d1c57835163929fe9a160e01b81523060048201526001600160a01b038681166024830152602090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610b4f57600091610cfd575b50610b79575b8351632b1e137760e21b81526020816004816001600160a01b038a165afa908115610b4f57600091610b5a575b5015610a69575b50825163140e25ad60e31b8152600481019190915260208160248160006001600160a01b0389165af19081156109b357600091610a37575b50610a05578151634faf793960e11b8152926020846004816001600160a01b0385165afa9384156109b3576000946109be575b5082516370a0823160e01b81523060048201529190602090839060249082906001600160a01b03165afa9182156109b35760009261097d575b50825163a9059cbb60e01b81526001600160a01b039091166004820152602481019190915291602090839081600081604481015b03926001600160a01b03165af191821561097257602092610955575b505160018152f35b61096b90833d85116102a1576102928183611227565b503861094d565b50513d6000823e3d90fd5b91506020823d6020116109ab575b8161099860209383611227565b81010312610436579051906109316108fd565b3d915061098b565b83513d6000823e3d90fd5b9093506020813d6020116109fd575b816109da60209383611227565b810103126104365751906001600160a01b038216820361043657909260206108c4565b3d91506109cd565b815162461bcd60e51b815260206004820152600b60248201526a1b5a5b9d0819985a5b195960aa1b6044820152606490fd5b90506020813d602011610a61575b81610a5260209383611227565b81010312610436575138610891565b3d9150610a45565b8351636eb1769f60e11b81523060048201526001600160a01b0386811660248301529190911690602081604481855afa908115610b4f57908391600091610b1a575b50101561085957835163095ea7b360e01b81526001600160a01b0386166004820152600019602482015290602090829060449082906000905af18015610b0f571561085957610b089060203d6020116102a1576102928183611227565b5038610859565b84513d6000823e3d90fd5b9150506020813d602011610b47575b81610b3660209383611227565b810103126104365782905138610aab565b3d9150610b29565b85513d6000823e3d90fd5b610b73915060203d6020116102a1576102928183611227565b38610852565b8351610b848161120c565b60018152602081016020368237815115610ce7576001600160a01b03871681528551631853304760e31b8152602060048201529151602483018190528291604483019160005b818110610cc55750600093928390039150829050837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015610b4f57610c1c575b50610825565b3d806000833e610c2c8183611227565b810190602081830312610436578051906001600160401b038211610436570181601f82011215610436578051906001600160401b038211610caf576020808360051b93895190610c7e83870183611227565b8152019282010192831161043657602001905b828210610c9f575050610c16565b8151815260209182019101610c91565b634e487b7160e01b600052604160045260246000fd5b82516001600160a01b0316845285945060209384019390920191600101610bca565b634e487b7160e01b600052603260045260246000fd5b610d16915060203d6020116102a1576102928183611227565b3861081f565b835162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b835162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606490fd5b919095506020823d602011610dcf575b81610d9e60209383611227565b81010312610436579051947f3a700941af6362d63bae3aafce3cc3a3f05b149061a37fb8678d9f6aea1201cf6106b3565b3d9150610d91565b87513d6000823e3d90fd5b815163a4168a9360e01b8152336004820152602490fd5b508060031936011261043657610e0d61119d565b6024356001600160401b03811161043657610e2f610e369136906004016111df565b3691611263565b918051610e428161120c565b601881526020927f216469726563745377617070657243616c6c4661696c6564000000000000000084830152344710610eab576000808686610e9596979851910134855af1610e8f611412565b9161177a565b8281805181010312610436578201519051908152f35b825162461bcd60e51b815260048101859052602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b503461043657602036600319011261043657610f1861119d565b610f20611300565b6001600160a01b03166000908152600260205220805460ff19166001179055005b5034610436576020366003190112610436576020906001600160a01b03610f6661119d565b166000526002825260ff81600020541690519015158152f35b50346104365760003660031901126104365760005490516001600160a01b039091168152602090f35b503461043657600036600319011261043657600154906001600160a01b0390338284160361101d57506bffffffffffffffffffffffff60a01b8092166001556000549133908316176000553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b5162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608490fd5b346104365760003660031901126104365761108b611300565b600180546001600160a01b0319908116909155600080549182168155906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b503461043657600036600319011261043657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346104365760203660031901126104365761113561119d565b61113d611300565b6001600160a01b03166000908152600260205220805460ff19169055005b34610436576000366003190112610436577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b038216820361043657565b606435906001600160a01b038216820361043657565b604435906001600160a01b038216820361043657565b9181601f84011215610436578235916001600160401b038311610436576020838186019501011161043657565b604081019081106001600160401b03821117610caf57604052565b90601f801991011681019081106001600160401b03821117610caf57604052565b6001600160401b038111610caf57601f01601f191660200190565b92919261126f82611248565b9161127d6040519384611227565b829481845281830111610436578281602093846000960137010152565b9080601f83011215610436578160206112b593359101611263565b90565b60005b8381106112cb5750506000910152565b81810151838201526020016112bb565b906020916112f4815180928185528580860191016112b8565b601f01601f1916010190565b6000546001600160a01b0316330361131457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610436575180151581036104365790565b9294939060609261138e9185526080602086015260808501906112db565b60408401959095526001600160a01b0316910152565b600060443d106112b557604051600319913d83016004833e81516001600160401b03918282113d60248401111761140157818401948551938411611409573d8501016020848701011161140157506112b592910160200190611227565b949350505050565b50949350505050565b3d1561143d573d9061142382611248565b916114316040519384611227565b82523d6000602084013e565b606090565b51906001600160a01b038216820361043657565b81601f8201121561043657805161146c81611248565b9261147a6040519485611227565b81845260208284010111610436576112b591602080850191016112b8565b908060209392818452848401376000828201840152601f01601f1916010190565b92949060018060a01b03808516916000958387526020956002875260409960ff8b8a205416156117445784169381169184831461173657826115875750505090858594939261152f8a51998a968795869463f6b13d3f60e01b865260048601526024850152606060448501526064840191611498565b03925af193841561157c57508193611548575b50505090565b9091809350813d8311611575575b6115608183611227565b81010312611572575051388080611542565b80fd5b503d611556565b51913d9150823e3d90fd5b8a51636eb1769f60e11b81523060048201526001600160a01b03919091166024820152959893959193918781604481885afa90811561172c579189939189989796959385916116eb575b508311611611575b5061152f908b519a8b978896879563a2c554d360e01b8752600487015260248601526044850152608060648501526084840191611498565b919394959650915089518781019063095ea7b360e01b8252866024820152600019604482015260448152608081018181106001600160401b038211176116d7578c5251899283929083905af1611665611412565b816116a7575b501561167e5785949392918791386115d9565b885162461bcd60e51b8152600481018790526002602482015261534160f01b6044820152606490fd5b805180159250889083156116bf575b5050503861166b565b6116cf9350820181019101611358565b3887816116b6565b634e487b7160e01b8b52604160045260248bfd5b92945050919394959681813d8311611725575b6117088183611227565b810103126117215791839188979695948a9451906115d1565b8880fd5b503d6116fe565b8b513d8b823e3d90fd5b505050965050505050505090565b8a5162461bcd60e51b815260048101899052600f60248201526e10b0b63637bbb2b229bbb0b83832b960891b6044820152606490fd5b919290156117dc575081511561178e575090565b3b156117975790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156117ef5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906118139060248301906112db565b0390fdfea264697066735822122098b74800d6152b8cafdfa8a582e692950992f16ac3de40ed61f8eb0a850a478364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to add."
        }
      },
      "directSwapperCall(address,bytes)": {
        "params": {
          "_swapper": "Address of the swapper to use.",
          "swapData": "Data to pass to the swapper. This data is encoded for a particular swap router."
        }
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "params": {
          "_amountIn": "Amount of tokens to swap.",
          "_fromAsset": "Address of the token to swap from.",
          "_swapData": "Data to pass to the swapper. This data is encoded for a particular swap router, usually given by an API. The swapper will decode the data and re-encode it with the new amountIn.",
          "_swapper": "Address of the swapper to use.",
          "_toAsset": "Address of the token to swap to."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "prepareAndForward(bytes32,bytes,uint256,address)": {
        "details": "This function is intended to be called by the xReceive function, and should not be called outside of that context. The function is `public` so that it can be used with try-catch.",
        "params": {
          "_amount": "- The amount of funds received in this transfer",
          "_asset": "- The asset of the funds received in this transfer",
          "_data": "- The data to be prepared",
          "_transferId": "- The transfer ID of the transfer that triggered this call"
        }
      },
      "removeSwapper(address)": {
        "params": {
          "_swapper": "Address of the swapper to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "details": "_originSender and _origin are not used in this implementation because this is meant for an \"unauthenticated\" call. This means any router can call this function and no guarantees are made on the data passed in. This should only be used when there are funds passed into the contract that need to be forwarded to another contract. This guarantees economically that there is no reason to call this function maliciously, because the router would be spending their own funds.",
        "params": {
          "_amount": "- The amount of funds received in this transfer.",
          "_asset": "- The asset of the funds received in this transfer.",
          "_callData": "- The data to be prepared and forwarded. Fallback address needs to be encoded in the data to be used in case the forward fails.",
          "_transferId": "- The transfer ID of the transfer that triggered this call."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ForwarderXReceiver__onlyConnext(address)": [
        {
          "notice": "ERRORS"
        }
      ]
    },
    "events": {
      "ForwardedFunctionCallFailed(bytes32)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "addSwapper(address)": {
        "notice": "Add a swapper to the list of allowed swappers."
      },
      "directSwapperCall(address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token. Uses a direct call to the swapper to allow easy swaps on the source side where the amount does not need to be changed."
      },
      "exactSwap(address,uint256,address,address,bytes)": {
        "notice": "Swap an exact amount of tokens for another token."
      },
      "prepareAndForward(bytes32,bytes,uint256,address)": {
        "notice": "Prepares the data for the function call and forwards it. This can execute any arbitrary function call in a two step process. For example, _prepare can be used to swap funds on a DEX, and _forwardFunctionCall can be used to call a contract with the swapped funds."
      },
      "removeSwapper(address)": {
        "notice": "Remove a swapper from the list of allowed swappers."
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "Receives funds from Connext and forwards them to a contract, using a two step process which is defined by the developer."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1334,
        "contract": "contracts/integration/Midas/MidasProtocolTarget.sol:MidasProtocolTarget",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1447,
        "contract": "contracts/integration/Midas/MidasProtocolTarget.sol:MidasProtocolTarget",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4944,
        "contract": "contracts/integration/Midas/MidasProtocolTarget.sol:MidasProtocolTarget",
        "label": "allowedSwappers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}